<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageProcessor</name>
    </assembly>
    <members>
        <member name="T:ImageProcessor.Bgra32">
            <summary>
            Structure that defines a 32 bits per pixel Bgra color. Used for pixel manipulation not for color conversion.
            </summary>
        </member>
        <member name="F:ImageProcessor.Bgra32.B">
            <summary>
            Holds the blue component of the color.
            </summary>
        </member>
        <member name="F:ImageProcessor.Bgra32.G">
            <summary>
            Holds the green component of the color.
            </summary>
        </member>
        <member name="F:ImageProcessor.Bgra32.R">
            <summary>
            Holds the red component of the color.
            </summary>
        </member>
        <member name="F:ImageProcessor.Bgra32.A">
            <summary>
            Holds the alpha component of the color.
            </summary>
        </member>
        <member name="F:ImageProcessor.Bgra32.Argb">
            <summary>
            Permits the color32 to be treated as a 32 bit integer.
            </summary>
        </member>
        <member name="M:ImageProcessor.Bgra32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Bgra32"/> struct.
            </summary>
            <param name="alpha">The alpha component.</param>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
        </member>
        <member name="M:ImageProcessor.Bgra32.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Bgra32"/> struct.
            </summary>
            <param name="argb">The combined color components.</param>
        </member>
        <member name="P:ImageProcessor.Bgra32.Color">
            <summary>
            Gets the color for this Color32 object.
            </summary>
        </member>
        <member name="M:ImageProcessor.Bgra32.op_Equality(ImageProcessor.Bgra32,ImageProcessor.Bgra32)">
            <summary>
            Indicates whether this instance and a specified <see cref="T:ImageProcessor.Bgra32"/> are equal.
            </summary>
            <param name="left">The instance on the left hand of the operator.</param>
            <param name="right">The instance on the right hand of the operator.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Bgra32.op_Inequality(ImageProcessor.Bgra32,ImageProcessor.Bgra32)">
            <summary>
            Indicates whether this instance and a specified <see cref="T:ImageProcessor.Bgra32"/> are not equal.
            </summary>
            <param name="left">The instance on the left hand of the operator.</param>
            <param name="right">The instance on the right hand of the operator.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Bgra32.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Bgra32.Equals(ImageProcessor.Bgra32)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Bgra32.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.ImageFormatException">
            <summary>
            The exception that is thrown when loading the supported image format types has failed.
            </summary>
        </member>
        <member name="M:ImageProcessor.ImageFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageFormatException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ImageProcessor.ImageFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageFormatException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:ImageProcessor.ImageFormatException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageFormatException" /> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.ImageFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageFormatException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:ImageProcessor.ImageProcessingException">
            <summary>
            The exception that is thrown when processing an image has failed.
            </summary>
        </member>
        <member name="M:ImageProcessor.ImageProcessingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageProcessingException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ImageProcessor.ImageProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageProcessingException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:ImageProcessor.ImageProcessingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageProcessingException" /> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.ImageProcessingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageProcessingException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:ImageProcessor.DefaultLogger">
            <summary>
            The default logger which logs messages to the trace listeners.
            </summary>
            <seealso cref="T:ImageProcessor.ILogger" />
        </member>
        <member name="M:ImageProcessor.DefaultLogger.Log``1(System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <typeparam name="T">The type calling the logger.</typeparam>
            <param name="text">The message to log.</param>
            <param name="callerName">The property or method name calling the log.</param>
            <param name="lineNumber">The line number where the method is called.</param>
        </member>
        <member name="M:ImageProcessor.DefaultLogger.Log(System.Type,System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="type">The type calling the logger.</param>
            <param name="text">The message to log.</param>
            <param name="callerName">The property or method name calling the log.</param>
            <param name="lineNumber">The line number where the method is called.</param>
        </member>
        <member name="M:ImageProcessor.DefaultLogger.LogInternal(System.Type,System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="type">The type calling the logger.</param>
            <param name="text">The message to log.</param>
            <param name="callerName">The property or method name calling the log.</param>
            <param name="lineNumber">The line number where the method is called.</param>
        </member>
        <member name="T:ImageProcessor.ILogger">
            <summary>
            Encapsulates properties and methods for logging messages.
            </summary>
        </member>
        <member name="M:ImageProcessor.ILogger.Log``1(System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <typeparam name="T">The type calling the logger.</typeparam>
            <param name="text">The message to log.</param>
            <param name="callerName">The property or method name calling the log.</param>
            <param name="lineNumber">The line number where the method is called.</param>
        </member>
        <member name="M:ImageProcessor.ILogger.Log(System.Type,System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="type">The type calling the logger.</param>
            <param name="text">The message to log.</param>
            <param name="callerName">The property or method name calling the log.</param>
            <param name="lineNumber">The line number where the method is called.</param>
        </member>
        <member name="T:ImageProcessor.QuantizationException">
            <summary>
            The exception that is thrown when quantizing an image has failed.
            </summary>
        </member>
        <member name="M:ImageProcessor.QuantizationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.QuantizationException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ImageProcessor.QuantizationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.QuantizationException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:ImageProcessor.QuantizationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.QuantizationException" /> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.QuantizationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.QuantizationException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:ImageProcessor.AssemblyExtensions">
            <summary>
            Encapsulates a series of time saving extension methods to the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.AssemblyExtensions.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            Gets a collection of loadable types from the given assembly.
            Adapted from <see href="http://stackoverflow.com/questions/7889228/how-to-prevent-reflectiontypeloadexception-when-calling-assembly-gettypes"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to load the types from.</param>
            <returns>
            The loadable <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.AssemblyExtensions.GetResourceAsString(System.Reflection.Assembly,System.String,System.Text.Encoding)">
            <summary>
            Converts an assembly resource into a string.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to load the strings from.</param>
            <param name="resource">The resource.</param>
            <param name="encoding">The character encoding to return the resource in.</param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.AssemblyExtensions.GetAssemblyFile(System.Reflection.Assembly)">
            <summary>
            Returns the <see cref="T:System.IO.FileInfo"/> identifying the file used to load the assembly.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to get the name from.</param>
            <returns>The <see cref="T:System.IO.FileInfo"/>.</returns>
        </member>
        <member name="M:ImageProcessor.AssemblyExtensions.GetAssemblyFile(System.Reflection.AssemblyName)">
            <summary>
            Returns the <see cref="T:System.IO.FileInfo"/> identifying the file used to load the assembly.
            </summary>
            <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName"/> to get the name from.</param>
            <returns>The <see cref="T:System.IO.FileInfo"/>.</returns>
        </member>
        <member name="T:ImageProcessor.DoubleExtensions">
            <summary>
            Encapsulates a series of time saving extension methods to the <see cref="T:System.Double"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.DoubleExtensions.ToByte(System.Double)">
            <summary>
            Converts an <see cref="T:System.Double"/> value into a valid <see cref="T:System.Byte"/>.
            <remarks>
            If the value given is less than 0 or greater than 255, the value will be constrained into
            those restricted ranges.
            </remarks>
            </summary>
            <param name="value">The <see cref="T:System.Double"/> to convert.</param>
            <returns>The <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="T:ImageProcessor.ImageExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Drawing.Bitmap"/> type.
            </summary>
        </member>
        <member name="M:ImageProcessor.ImageExtensions.DeepClone(System.Drawing.Image)">
            <summary>
            Creates a deep copy of the source image.
            </summary>
            <param name="source">The source image.</param>
            <returns>The <see cref="T:System.Drawing.Bitmap"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageExtensions.DeepClone(System.Drawing.Image,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Creates a deep copy of the source image.
            </summary>
            <param name="source">The source image.</param>
            <param name="targetFormat">The target pixel format.</param>
            <returns>The <see cref="T:System.Drawing.Bitmap"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageExtensions.DeepClone(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,ImageProcessor.FrameProcessingMode)">
            <summary>
            Creates a deep copy of the source image.
            </summary>
            <param name="source">The source image.</param>
            <param name="targetFormat">The target pixel format.</param>
            <param name="frameProcessingMode">The frame processing mode.</param>
            <returns>The <see cref="T:System.Drawing.Bitmap"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageExtensions.DeepClone(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,ImageProcessor.FrameProcessingMode,System.Boolean)">
            <summary>
            Creates a deep copy of the source image.
            </summary>
            <param name="source">The source image.</param>
            <param name="targetFormat">The target pixel format.</param>
            <param name="frameProcessingMode">The frame processing mode.</param>
            <param name="preserveMetaData">Whether to preserve metadata.</param>
            <returns>The <see cref="T:System.Drawing.Bitmap"/>.</returns>
        </member>
        <member name="T:ImageProcessor.IntegerExtensions">
            <summary>
            Encapsulates a series of time saving extension methods to the <see cref="T:System.Int32"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.IntegerExtensions.ToByte(System.Int32)">
            <summary>
            Converts an <see cref="T:System.Int32"/> value into a valid <see cref="T:System.Byte"/>.
            <remarks>
            If the value given is less than 0 or greater than 255, the value will be constrained into
            those restricted ranges.
            </remarks>
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> to convert.</param>
            <returns>The <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="T:ImageProcessor.BigEndianBitConverter">
            <summary>
              Implementation of EndianBitConverter which converts to/from big-endian byte arrays.
              <remarks>
              Adapted from Miscellaneous Utility Library <see href="http://jonskeet.uk/csharp/miscutil/" />.
              </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.BigEndianBitConverter.Endianness">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.BigEndianBitConverter.IsLittleEndian">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.BigEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.BigEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.ComputerArchitectureInfo">
            <summary>
            Encapsulates methods that provide information about the current computer architecture.
            </summary>
        </member>
        <member name="M:ImageProcessor.ComputerArchitectureInfo.IsLittleEndian">
            <summary>
            Returns a value indicating whether the current computer architecture is little endian.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="T:ImageProcessor.EndianBitConverter">
            <summary>
            Equivalent of <see cref="T:System.BitConverter"/>, but with either endianness.
            <remarks>
            Adapted from Miscellaneous Utility Library <see href="http://jonskeet.uk/csharp/miscutil/"/>.
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.EndianBitConverter.Little">
            <summary>
            Gets a little-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="P:ImageProcessor.EndianBitConverter.Big">
            <summary>
            Gets a big-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="P:ImageProcessor.EndianBitConverter.Endianness">
            <summary>
            Gets the byte order ("endianness") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianness") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a
            64-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision
            floating point number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a
            32-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 32-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point
            number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A single-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the given number of bytes from the given array, from the given start
            position, into a long, using the bytes as the least significant part of the long.
            By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert.</param>
            <param name="startIndex">The index of the first byte to convert.</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion.</param>
            <returns>The converted number.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CheckByteArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the given argument for validity.
            </summary>
            <param name="value">The byte array passed in.</param>
            <param name="startIndex">The start index passed in.</param>
            <param name="bytesRequired">The number of bytes required.</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero or greater than the length of value minus bytesRequired.
            </exception>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a String converted from the elements of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <remarks>All the elements of value are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Returns a String converted from the elements of a byte array starting at a specified array position.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <remarks>The elements from array position startIndex to the end of the array are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a String converted from a specified number of bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of bytes to convert.</param>
            <remarks>The length elements from array position startIndex are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal value converted from sixteen bytes
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal  formed by sixteen bytes beginning at startIndex.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Copies the specified decimal value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This must be implemented in concrete derived classes, but the implementation
            may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for.</param>
            <param name="bytes">The number of significant bytes to copy.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Boolean value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A Boolean value.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Unicode character value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies the specified double-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies the specified single-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CheckedFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the arguments for validity before calling FromBytes
            (which can therefore assume the arguments are valid).
            </summary>
            <param name="value">The bytes to convert after checking.</param>
            <param name="startIndex">The index of the first byte to convert.</param>
            <param name="bytesToConvert">The number of bytes to convert.</param>
            <returns>The <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.GetBytes(System.Int64,System.Int32)">
            <summary>
            Returns an array with the given number of bytes formed
            from the least significant bytes of the specified value.
            This is used to implement the other GetBytes methods.
            </summary>
            <param name="value">The value to get bytes for.</param>
            <param name="bytes">The number of significant bytes to return.</param>
            <returns>
            The <see cref="T:byte[]"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.CopyBytes(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This is used to implement the other CopyBytes methods.
            </summary>
            <param name="value">The value to copy bytes for.</param>
            <param name="bytes">The number of significant bytes to copy.</param>
            <param name="buffer">The byte array to copy the bytes into.</param>
            <param name="index">The first index into the array to copy the bytes into.</param>
        </member>
        <member name="T:ImageProcessor.EndianBitConverter.Int32SingleUnion">
            <summary>
            Union used solely for the equivalent of DoubleToInt64Bits and vice versa.
            </summary>
        </member>
        <member name="F:ImageProcessor.EndianBitConverter.Int32SingleUnion.i">
            <summary>
            Int32 version of the value.
            </summary>
        </member>
        <member name="F:ImageProcessor.EndianBitConverter.Int32SingleUnion.f">
            <summary>
            Single version of the value.
            </summary>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.EndianBitConverter.Int32SingleUnion"/> struct.
            </summary>
            <param name="i">The integer value of the new instance.</param>
        </member>
        <member name="M:ImageProcessor.EndianBitConverter.Int32SingleUnion.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.EndianBitConverter.Int32SingleUnion"/> struct.
            </summary>
            <param name="f">
            The floating point value of the new instance.
            </param>
        </member>
        <member name="P:ImageProcessor.EndianBitConverter.Int32SingleUnion.AsInt32">
            <summary>
            Gets the value of the instance as an integer.
            </summary>
        </member>
        <member name="P:ImageProcessor.EndianBitConverter.Int32SingleUnion.AsSingle">
            <summary>
            Gets the value of the instance as a floating point number.
            </summary>
        </member>
        <member name="T:ImageProcessor.Endianness">
            <summary>
            Enumerates the Endianness of a converter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Endianness.LittleEndian">
            <summary>
            Little endian - least significant byte first.
            </summary>
        </member>
        <member name="F:ImageProcessor.Endianness.BigEndian">
            <summary>
            Big endian - most significant byte first.
            </summary>
        </member>
        <member name="T:ImageProcessor.EnumerableUtilities">
            <summary>
            Encapsulates a series of time saving extension methods to the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
        </member>
        <member name="M:ImageProcessor.EnumerableUtilities.SteppedRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="step">The incremental step.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a range of sequential integral numbers.
            </returns>
        </member>
        <member name="M:ImageProcessor.EnumerableUtilities.SteppedRange(System.Int32,System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toDelegate">
            A method that has one parameter and returns a <see cref="T:System.Boolean"/> calculating the end index.
            </param>
            <param name="step">The incremental step.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a range of sequential integral numbers.
            </returns>
        </member>
        <member name="M:ImageProcessor.EnumerableUtilities.RangeIterator(System.Int32,System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toDelegate">
            A method that has one parameter and returns a <see cref="T:System.Boolean"/> calculating the end index.
            </param>
            <param name="step">The incremental step.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains a range of sequential integral numbers.
            </returns>
        </member>
        <member name="T:ImageProcessor.FormatUtilities">
            <summary>
            Utility methods for working with supported image formats.
            </summary>
        </member>
        <member name="M:ImageProcessor.FormatUtilities.GetFormat(System.IO.Stream)">
            <summary>
            Gets the correct <see cref="T:ImageProcessor.Formats.IImageFormat"/> from the given stream.
            <see href="http://stackoverflow.com/questions/55869/determine-file-type-of-an-image"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns>The <see cref="T:ImageProcessor.Formats.IImageFormat"/>.</returns>
        </member>
        <member name="M:ImageProcessor.FormatUtilities.GetFormat(System.String)">
            <summary>
            Gets the correct <see cref="T:ImageProcessor.Formats.IImageFormat"/> from the given file path.
            </summary>
            <param name="path">The path string from which to get the format.</param>
            <returns>The <see cref="T:ImageProcessor.Formats.IImageFormat"/>.</returns>
        </member>
        <member name="M:ImageProcessor.FormatUtilities.DeepCloneImageFrame(System.Drawing.Image,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Creates a deep copy of the source image frame allowing you to set the pixel format.
            <remarks>
            Images with an indexed <see cref="T:System.Drawing.Imaging.PixelFormat"/> cannot deep copied using a <see cref="T:System.Drawing.Graphics"/>
            surface so have to be copied to <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> instead.
            </remarks>
            </summary>
            <param name="source">The source image frame.</param>
            <param name="targetFormat">The target pixel format.</param>
            <returns>The <see cref="T:System.Drawing.Bitmap"/>.</returns>
        </member>
        <member name="M:ImageProcessor.FormatUtilities.CreateEmptyFrameFrom(System.Drawing.Image)">
            <summary>
            Creates an empty image frame with the same pixel format and resolution as the original.
            </summary>
            <param name="source">The source image frame.</param>
            <returns>The <see cref="T:System.Drawing.Bitmap"/>.</returns>
        </member>
        <member name="M:ImageProcessor.FormatUtilities.GetSupportedBitDepth(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Gets the color depth in our suppported range in bits per pixel for the given pixel format.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <returns>The <see cref="T:ImageProcessor.Formats.BitDepth"/>.</returns>
        </member>
        <member name="M:ImageProcessor.FormatUtilities.GetPixelFormatForBitDepth(ImageProcessor.Formats.BitDepth)">
            <summary>
            Gets the default pixel format for the given bit depth.
            </summary>
            <param name="bitDepth">The color depth in bits per pixel.</param>
            <returns>The <see cref="T:System.Drawing.Imaging.PixelFormat"/>.</returns>
        </member>
        <member name="M:ImageProcessor.FormatUtilities.HasAlpha(System.Drawing.Image)">
            <summary>
            Returns a value indicating whether the given image has an alpha channel.
            </summary>
            <param name="image">
            The <see cref="T:System.Drawing.Image"/> to test.
            </param>
            <returns>
            The true if the image has an alpha channel; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.FormatUtilities.IsAnimated(System.Drawing.Image)">
            <summary>
            Returns a value indicating whether the given image is animated.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to test.</param>
            <returns>
            The true if the image is animated; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.FormatUtilities.IsIndexed(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Returns a value indicating whether the given pixel format is indexed.
            </summary>
            <param name="format">The <see cref="T:System.Drawing.Imaging.PixelFormat"/> to test.</param>
            <returns>
            The true if the image is indexed; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageProcessor.FormatUtilities.CreatePropertyItem">
            <summary>
            Initializes a new instance of the <see cref="T:System.Drawing.Imaging.PropertyItem"/> class.
            </summary>
            <returns>The <see cref="T:System.Drawing.Imaging.PropertyItem"/>.</returns>
        </member>
        <member name="T:ImageProcessor.GeometryUtilities">
            <summary>
            Utility class for common geometric functions.
            </summary>
        </member>
        <member name="M:ImageProcessor.GeometryUtilities.DegreeToRadian(System.Single)">
            <summary>
            Converts a degree (360-periodic) angle to a radian (2*Pi-periodic) angle.
            </summary>
            <param name="degree">The angle in degrees.</param>
            <returns>
            The <see cref="T:System.Single"/> representing the degree as radians.
            </returns>
        </member>
        <member name="M:ImageProcessor.GeometryUtilities.RadianToDegree(System.Single)">
            <summary>
            Converts a radian (2*Pi-periodic) angle to a degree (360-periodic) angle.
            </summary>
            <param name="radian">The angle in radians.</param>
            <returns>
            The <see cref="T:System.Single"/> representing the degree as radians.
            </returns>
        </member>
        <member name="T:ImageProcessor.IComputerArchitectureInfo">
            <summary>
            Encapsulates methods that provide information about the current computer architecture.
            </summary>
        </member>
        <member name="M:ImageProcessor.IComputerArchitectureInfo.IsLittleEndian">
            <summary>
            Returns a value indicating whether the current computer architecture is little endian.
            </summary>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="T:ImageProcessor.LittleEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from little-endian byte arrays.
            <remarks>
            Adapted from Miscellaneous Utility Library <see href="http://jonskeet.uk/csharp/miscutil/"/>.
            </remarks>
            </summary>
        </member>
        <member name="P:ImageProcessor.LittleEndianBitConverter.Endianness">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.LittleEndianBitConverter.IsLittleEndian">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.LittleEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.LittleEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.NumberUtilities">
            <summary>
            Reusable numeric utility methods.
            </summary>
        </member>
        <member name="M:ImageProcessor.NumberUtilities.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Restricts a <see cref="T:System.Byte"/> to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
            <returns>
            The <see cref="T:System.Byte"/> representing the clamped value.
            </returns>
        </member>
        <member name="M:ImageProcessor.NumberUtilities.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Restricts a <see cref="T:System.UInt32"/> to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
            <returns>
            The <see cref="T:System.Int32"/> representing the clamped value.
            </returns>
        </member>
        <member name="M:ImageProcessor.NumberUtilities.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a <see cref="T:System.Int32"/> to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
            <returns>
            The <see cref="T:System.Int32"/> representing the clamped value.
            </returns>
        </member>
        <member name="M:ImageProcessor.NumberUtilities.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Restricts a <see cref="T:System.Single"/> to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
            <returns>
            The <see cref="T:System.Single"/> representing the clamped value.
            </returns>
        </member>
        <member name="M:ImageProcessor.NumberUtilities.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Restricts a <see cref="T:System.Double"/> to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
            <returns>
            The <see cref="T:System.Double"/> representing the clamped value.
            </returns>
        </member>
        <member name="T:ImageProcessor.Configuration.ImageProcessorBootstrapper">
            <summary>
            The bootstrapper containing initialization code for extending ImageProcessor.
            </summary>
        </member>
        <member name="F:ImageProcessor.Configuration.ImageProcessorBootstrapper.Lazy">
            <summary>
            A new instance Initializes a new instance of the <see cref="T:ImageProcessor.Configuration.ImageProcessorBootstrapper"/> class.
            with lazy initialization.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.ImageProcessorBootstrapper.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ImageProcessor.Configuration.ImageProcessorBootstrapper"/> class from being created.
            </summary>
        </member>
        <member name="P:ImageProcessor.Configuration.ImageProcessorBootstrapper.Instance">
            <summary>
            Gets the current instance of the <see cref="T:ImageProcessor.Configuration.ImageProcessorBootstrapper"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Configuration.ImageProcessorBootstrapper.ImageFormats">
            <summary>
            Gets the supported image formats.
            </summary>
        </member>
        <member name="P:ImageProcessor.Configuration.ImageProcessorBootstrapper.Logger">
            <summary>
            Gets the currently installed logger.
            </summary>
        </member>
        <member name="P:ImageProcessor.Configuration.ImageProcessorBootstrapper.NativeBinaryFactory">
            <summary>
            Gets the native binary factory for registering embedded (unmanaged) binaries.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.ImageProcessorBootstrapper.AddImageFormats(ImageProcessor.Formats.IImageFormat[])">
            <summary>
            Adds the given image formats to the supported format collection.
            </summary>
            <param name="formats">The <see cref="T:ImageProcessor.Formats.IImageFormat"/> instances to add.</param>
        </member>
        <member name="M:ImageProcessor.Configuration.ImageProcessorBootstrapper.SetLogger(ImageProcessor.ILogger)">
            <summary>
            Allows the setting of the default logger. Useful for when
            the type finder fails to dynamically add the custom logger implementation.
            </summary>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="M:ImageProcessor.Configuration.ImageProcessorBootstrapper.LoadSupportedImageFormats">
            <summary>
            Creates a collection of supported image formats that ImageProcessor can run.
            </summary>
        </member>
        <member name="T:ImageProcessor.Configuration.NativeBinaryFactory">
            <summary>
            Controls the loading and unloading of any native binaries required by ImageProcessor.
            </summary>
        </member>
        <member name="F:ImageProcessor.Configuration.NativeBinaryFactory.Is64Bit">
            <summary>
            Whether the process is running in 64bit mode. Used for calling the correct dllimport method.
            </summary>
        </member>
        <member name="F:ImageProcessor.Configuration.NativeBinaryFactory.nativeBinaries">
            <summary>
            The native binaries.
            </summary>
        </member>
        <member name="F:ImageProcessor.Configuration.NativeBinaryFactory.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeBinaryFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Configuration.NativeBinaryFactory"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeBinaryFactory.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ImageProcessor.Configuration.NativeBinaryFactory"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Configuration.NativeBinaryFactory.Is64BitEnvironment">
            <summary>
            Gets a value indicating whether the operating environment is 64 bit.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeBinaryFactory.RegisterNativeBinary(System.String,System.Byte[])">
            <summary>
            Registers any embedded native (unmanaged) binaries required by ImageProcessor.
            </summary>
            <param name="name">The name of the native binary.</param>
            <param name="resourceBytes">The resource bytes containing the native binary.</param>
            <exception cref="T:System.ApplicationException">
            Thrown if the binary cannot be registered.
            </exception>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeBinaryFactory.Dispose">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeBinaryFactory.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
            <param name="disposing">If true, the object gets disposed.</param>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeBinaryFactory.FreeNativeBinaries">
            <summary>
            Frees the reference to the native binaries.
            </summary>
        </member>
        <member name="T:ImageProcessor.Configuration.NativeMethods">
            <summary>
            Provides access to unmanaged native methods.
            </summary>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeMethods.LoadLibrary(System.String)">
            <summary>
            Loads the specified module into the address space of the calling process.
            The specified module may cause other modules to be loaded.
            </summary>
            <param name="libname">
            The name of the module. This can be either a library module or
            an executable module.
            </param>
            <returns>If the function succeeds, the return value is a handle to the module; otherwise null.</returns>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeMethods.FreeLibrary(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count.
            When the reference count reaches zero, the module is unloaded from the address space of the calling
            process and the handle is no longer valid.
            </summary>
            <param name="hModule">A handle to the loaded library module.
            The LoadLibrary, LoadLibraryEx, GetModuleHandle, or GetModuleHandleEx function returns this handle.</param>
            <returns>If the function succeeds, the return value is nonzero; otherwise zero.</returns>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeMethods.dlopen(System.String,System.Int32)">
            <summary>
            Loads the specified module into the address space of the calling process.
            The specified module may cause other modules to be loaded.
            </summary>
            <param name="libname">
            The name of the module. This can be either a library module or
            an executable module.
            </param>
            <param name="flags">
            The flag indicating whether to load the library immediately or lazily.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the module; otherwise null.
            </returns>
        </member>
        <member name="M:ImageProcessor.Configuration.NativeMethods.dlclose(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count.
            When the reference count reaches zero, the module is unloaded from the address space of the calling
            process and the handle is no longer valid.
            </summary>
            <param name="hModule">A handle to the loaded library module.
            The LoadLibrary, LoadLibraryEx, GetModuleHandle, or GetModuleHandleEx function returns this handle.</param>
            <returns>If the function succeeds, the return value is nonzero; otherwise zero.</returns>
        </member>
        <member name="T:ImageProcessor.FastBitmap">
            <summary>
            Allows fast access to <see cref="T:System.Drawing.Bitmap"/>'s pixel data.
            </summary>
        </member>
        <member name="F:ImageProcessor.FastBitmap.bitmap">
            <summary>
            The bitmap.
            </summary>
        </member>
        <member name="F:ImageProcessor.FastBitmap.bytesPerRow">
            <summary>
            The number of bytes in a row.
            </summary>
        </member>
        <member name="F:ImageProcessor.FastBitmap.bitmapData">
            <summary>
            The bitmap data.
            </summary>
        </member>
        <member name="F:ImageProcessor.FastBitmap.pixelBase">
            <summary>
            The position of the first pixel in the bitmap.
            </summary>
        </member>
        <member name="F:ImageProcessor.FastBitmap.isDisposed">
            <summary>
            A value indicating whether this instance of the given entity has been disposed.
            </summary>
            <value><see langword="true"/> if this instance has been disposed; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:ImageProcessor.FastBitmap.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.FastBitmap"/> class.
            </summary>
            <param name="bitmap">The input bitmap.</param>
        </member>
        <member name="P:ImageProcessor.FastBitmap.Width">
            <summary>
            Gets the width, in pixels of the <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
        </member>
        <member name="P:ImageProcessor.FastBitmap.Height">
            <summary>
            Gets the height, in pixels of the <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
        </member>
        <member name="P:ImageProcessor.FastBitmap.Item(System.Int32,System.Int32)">
            <summary>
            Gets the pixel data for the given position.
            </summary>
            <param name="x">The x position of the pixel.</param>
            <param name="y">The y position of the pixel.</param>
            <returns>
            The <see cref="T:ImageProcessor.Bgra32"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.FastBitmap.op_Implicit(ImageProcessor.FastBitmap)~System.Drawing.Image">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.FastBitmap"/> to a <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="fastBitmap">The instance of <see cref="T:ImageProcessor.FastBitmap"/> to convert.</param>
            <returns>
            An instance of <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.FastBitmap.op_Implicit(ImageProcessor.FastBitmap)~System.Drawing.Bitmap">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.FastBitmap"/> to a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="fastBitmap">The instance of <see cref="T:ImageProcessor.FastBitmap"/> to convert.</param>
            <returns>
            An instance of <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.FastBitmap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color at the specified pixel of the <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <param name="y">The y-coordinate of the pixel to retrieve.</param>
            <returns>The <see cref="T:System.Drawing.Color"/> at the given pixel.</returns>
        </member>
        <member name="M:ImageProcessor.FastBitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the specified pixel of the <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <param name="y">The y-coordinate of the pixel to set.</param>
            <param name="color">
            A <see cref="T:System.Drawing.Color"/> color structure that represents the
            color to set the specified pixel.
            </param>
        </member>
        <member name="M:ImageProcessor.FastBitmap.Dispose">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
        </member>
        <member name="M:ImageProcessor.FastBitmap.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.FastBitmap.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.FastBitmap.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees resources for the Garbage Collector.
            </summary>
            <param name="disposing">If true, the object gets disposed.</param>
        </member>
        <member name="M:ImageProcessor.FastBitmap.LockBitmap">
            <summary>
            Locks the bitmap into system memory.
            </summary>
        </member>
        <member name="M:ImageProcessor.FastBitmap.UnlockBitmap">
            <summary>
            Unlocks the bitmap from system memory.
            </summary>
        </member>
        <member name="T:ImageProcessor.Formats.BitDepth">
            <summary>
            Provides enumeration for the available bit depths.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.BitDepth.Bit1">
            <summary>
            1 bit per pixel
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.BitDepth.Bit4">
            <summary>
            4 bits per pixel
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.BitDepth.Bit8">
            <summary>
            8 bits per pixel
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.BitDepth.Bit16">
            <summary>
            16 bits per pixel
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.BitDepth.Bit24">
            <summary>
            24 bits per pixel
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.BitDepth.Bit32">
            <summary>
            32 bits per pixel
            </summary>
        </member>
        <member name="T:ImageProcessor.Formats.BitmapFormat">
            <summary>
            Provides the necessary information to support bitmap images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.BitmapFormat.FileHeaders">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.BitmapFormat.FileExtensions">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.BitmapFormat.MimeType">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.BitmapFormat.ImageFormat">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.BitmapFormat.Save(System.IO.Stream,System.Drawing.Image,ImageProcessor.Formats.BitDepth,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Formats.FormatBase">
            <summary>
            The supported format base. Implement this class when building a supported format.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.FormatBase.FileHeaders">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.FormatBase.FileExtensions">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.FormatBase.MimeType">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.FormatBase.DefaultExtension">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.FormatBase.ImageFormat">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.FormatBase.Quantizer">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.FormatBase.Load(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.FormatBase.ApplyProcessor``1(``0,ImageProcessor.ImageFactory)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.FormatBase.DeepClone(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,ImageProcessor.FrameProcessingMode,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:ImageProcessor.Formats.FormatBase.Save(System.IO.Stream,System.Drawing.Image,ImageProcessor.Formats.BitDepth,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.FormatBase.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.FormatBase.Equals(ImageProcessor.Formats.IImageFormat)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.FormatBase.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.FormatBase.CopyMetadata(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Copies the metadata from the source image to the target.
            </summary>
            <param name="source">The source image.</param>
            <param name="target">The target image.</param>
        </member>
        <member name="M:ImageProcessor.Formats.FormatBase.ShouldRotateOnProcess(ImageProcessor.ImageFactory,System.Int32@)">
            <summary>
            System.Drawing does not respect the EXIF orientation when using graphics so we have to
            rotate the image before and after applying processing operations.
            See <see href="https://github.com/JimBobSquarePants/ImageProcessor/issues/559"/>.
            </summary>
            <param name="factory">The image factory.</param>
            <param name="orientation">The EXIF orientation value.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Formats.FormatBase.ForwardRotateFlip(System.Int32,System.Drawing.Image)">
            <summary>
            Performs a forward rotation of an image.
            </summary>
            <param name="orientation">The EXIF orientation value.</param>
            <param name="image">The image to rotate.</param>
        </member>
        <member name="M:ImageProcessor.Formats.FormatBase.ReverseRotateFlip(System.Int32,System.Drawing.Image)">
            <summary>
            Performs an inverse rotation of an image.
            </summary>
            <param name="orientation">The EXIF orientation value.</param>
            <param name="image">The image to rotate.</param>
        </member>
        <member name="T:ImageProcessor.Formats.GifDecoder">
            <summary>
            Allows the decoding of gifs into individual frames.
            </summary>
        </member>
        <member name="M:ImageProcessor.Formats.GifDecoder.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Formats.GifDecoder"/> class.
            </summary>
            <param name="image">
            The <see cref="P:ImageProcessor.Formats.GifDecoder.Image"/> to decode.
            </param>
        </member>
        <member name="M:ImageProcessor.Formats.GifDecoder.#ctor(System.Drawing.Image,ImageProcessor.FrameProcessingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Formats.GifDecoder"/> class.
            </summary>
            <param name="image">The image to decode.</param>
            <param name="frameProcessingMode">The frame processing mode.</param>
        </member>
        <member name="P:ImageProcessor.Formats.GifDecoder.Image">
            <summary>
            Gets the input image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.GifDecoder.IsAnimated">
            <summary>
            Gets a value indicating whether the image is animated.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.GifDecoder.LoopCount">
            <summary>
            Gets the loop count.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.GifDecoder.FrameCount">
            <summary>
            Gets the frame count.
            </summary>
        </member>
        <member name="M:ImageProcessor.Formats.GifDecoder.GetFrame(System.Int32)">
            <summary>
            Gets the frame at the specified index.
            <remarks>
            Image frames are returned in <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> format to allow processing
            using the <see cref="T:System.Drawing.Graphics"/> canvas.
            </remarks>
            </summary>
            <param name="index">The index.</param>
            <returns>
            The <see cref="T:ImageProcessor.Formats.GifFrame"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Formats.GifEncoder">
            <summary>
            Encodes multiple images as an animated gif to a stream.
            <remarks>
            Uses default .NET GIF encoding and adds animation headers.
            Adapted from <see href="http://github.com/DataDink/Bumpkit/blob/master/BumpKit/BumpKit/GifEncoder.cs"/>.
            </remarks>
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.ApplicationBlockSize">
            <summary>
            The application block size.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.ApplicationExtensionBlockIdentifier">
            <summary>
            The application extension block identifier.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.FileTrailer">
            <summary>
            The file trailer.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.GraphicControlExtensionBlockIdentifier">
            <summary>
            The graphic control extension block identifier.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.GraphicControlExtensionBlockSize">
            <summary>
            The graphic control extension block size.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.SourceColorBlockLength">
            <summary>
            The source color block length.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.SourceColorBlockPosition">
            <summary>
            The source color block position.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.SourceGlobalColorInfoPosition">
            <summary>
            The source global color info position.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.SourceGraphicControlExtensionLength">
            <summary>
            The source graphic control extension length.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.SourceGraphicControlExtensionPosition">
            <summary>
            The source graphic control extension position.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.SourceImageBlockHeaderLength">
            <summary>
            The source image block header length.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.SourceImageBlockPosition">
            <summary>
            The source image block position.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.ApplicationIdentification">
            <summary>
            The application identification.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.FileType">
            <summary>
            The file type and version.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.imageStream">
            <summary>
            The stream.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.repeatCount">
            <summary>
            The repeat count.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.terminated">
            <summary>
            Whether the gif has has the last terminated byte written.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.isFirstImageFrame">
            <summary>
            Whether this is first image frame.
            </summary>
        </member>
        <member name="F:ImageProcessor.Formats.GifEncoder.quantizer">
            <summary>
            The quantizer for reducing the palette.
            </summary>
        </member>
        <member name="M:ImageProcessor.Formats.GifEncoder.#ctor(ImageProcessor.Quantizers.IQuantizer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Formats.GifEncoder"/> class.
            </summary>
            <param name="quantizer">The quantizer used to reduce and index the images pixels.</param>
            <param name="repeatCount">
            The number of times to repeat the animation.
            </param>
        </member>
        <member name="M:ImageProcessor.Formats.GifEncoder.EncodeFrame(ImageProcessor.Formats.GifFrame)">
            <summary>
            Encodes the image frame to the output gif.
            </summary>
            <param name="frame">The <see cref="T:ImageProcessor.Formats.GifFrame"/> containing the image.</param>
        </member>
        <member name="M:ImageProcessor.Formats.GifEncoder.Encode">
            <summary>
            Encodes the completed gif to an <see cref="T:System.Drawing.Image"/>.
            </summary>
            <returns>The completed animated gif.</returns>
        </member>
        <member name="M:ImageProcessor.Formats.GifEncoder.EncodeToStream(System.IO.Stream)">
            <summary>
            Encodes the completed gif to an <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ImageProcessor.Formats.GifEncoder.Terminate">
            <summary>
            Writes the termination marker to the image stream.
            </summary>
        </member>
        <member name="M:ImageProcessor.Formats.GifEncoder.WriteHeaderBlock(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Writes the header block of the animated gif to the stream.
            </summary>
            <param name="sourceGif">The source gif.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
        </member>
        <member name="M:ImageProcessor.Formats.GifEncoder.WriteByte(System.Int32)">
            <summary>
            Writes the given integer as a byte to the stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ImageProcessor.Formats.GifEncoder.WriteColorTable(System.IO.Stream)">
            <summary>
            Writes the color table.
            </summary>
            <param name="sourceGif">The source gif.</param>
        </member>
        <member name="M:ImageProcessor.Formats.GifEncoder.WriteGraphicControlBlock(System.IO.Stream,System.Int32)">
            <summary>
            Writes graphic control block.
            </summary>
            <param name="gifStream">The source gif.</param>
            <param name="frameDelay">The frame delay.</param>
        </member>
        <member name="M:ImageProcessor.Formats.GifEncoder.WriteImageBlock(System.IO.Stream,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the image block data.
            </summary>
            <param name="gifStream">The source gif.</param>
            <param name="includeColorTable">The include color table.</param>
            <param name="x">The x position to write the image block.</param>
            <param name="y">The y position to write the image block.</param>
            <param name="h">The height of the image block.</param>
            <param name="w">The width of the image block.</param>
        </member>
        <member name="M:ImageProcessor.Formats.GifEncoder.WriteShort(System.Int32)">
            <summary>
            Writes a short to the image stream.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:ImageProcessor.Formats.GifFormat">
            <summary>
            Provides the necessary information to support gif images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.GifFormat.FileHeaders">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.GifFormat.FileExtensions">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.GifFormat.MimeType">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.GifFormat.ImageFormat">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.GifFormat.ApplyProcessor``1(``0,ImageProcessor.ImageFactory)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.GifFormat.DeepClone(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,ImageProcessor.FrameProcessingMode,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:ImageProcessor.Formats.GifFormat.Save(System.IO.Stream,System.Drawing.Image,ImageProcessor.Formats.BitDepth,System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:ImageProcessor.Formats.GifFrame">
            <summary>
            A single gif frame.
            </summary>
        </member>
        <member name="M:ImageProcessor.Formats.GifFrame.#ctor(System.Drawing.Image,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Formats.GifFrame"/> class.
            </summary>
            <param name="source">The source image to copy into the new frame.</param>
            <param name="delay">The time, in milliseconds, to wait before animating to the next frame.</param>
        </member>
        <member name="M:ImageProcessor.Formats.GifFrame.#ctor(System.Drawing.Image,System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Formats.GifFrame"/> class.
            </summary>
            <param name="source">The source image to copy into the new frame.</param>
            <param name="delay">The time, in milliseconds, to wait before animating to the next frame.</param>
            <param name="x">The frame left position.</param>
            <param name="y">The frame top position.</param>
        </member>
        <member name="P:ImageProcessor.Formats.GifFrame.Image">
            <summary>
            Gets the image, stored in <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/> format to allow processing
            using the <see cref="T:System.Drawing.Graphics"/> canvas.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.GifFrame.Delay">
            <summary>
            Gets the delay in milliseconds.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.GifFrame.X">
            <summary>
            Gets the left position of the frame.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.GifFrame.Y">
            <summary>
            Gets the top position of the frame.
            </summary>
        </member>
        <member name="M:ImageProcessor.Formats.GifFrame.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Formats.IImageFormat">
            <summary>
            Defines the contract for a supported image format.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.IImageFormat.FileHeaders">
            <summary>
            Gets the file headers.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.IImageFormat.FileExtensions">
            <summary>
            Gets the list of file extensions.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.IImageFormat.MimeType">
            <summary>
            Gets the standard identifier used on the Internet to indicate the type of data that a file contains.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.IImageFormat.DefaultExtension">
            <summary>
            Gets the default file extension.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.IImageFormat.ImageFormat">
            <summary>
            Gets the file format of the image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.IImageFormat.Quantizer">
            <summary>
            Gets the quantizer for reducing the image palette.
            </summary>
        </member>
        <member name="M:ImageProcessor.Formats.IImageFormat.Load(System.IO.Stream)">
            <summary>
            Loads the image to process.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the image information.</param>
            <returns>
            The <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Formats.IImageFormat.ApplyProcessor``1(``0,ImageProcessor.ImageFactory)">
            <summary>
            Applies the given processor the current image.
            </summary>
            <typeparam name="T">The type of <see cref="T:ImageProcessor.Processing.IGraphicsProcessor"/>.</typeparam>
            <param name="processor">The processor.</param>
            <param name="factory">The factory.</param>
            <returns>The <see cref="T:System.Drawing.Image"/>.</returns>
            <exception cref="T:ImageProcessor.ImageProcessingException">Thrown if an error occurs during processing.</exception>
        </member>
        <member name="M:ImageProcessor.Formats.IImageFormat.DeepClone(System.Drawing.Image,System.Drawing.Imaging.PixelFormat,ImageProcessor.FrameProcessingMode,System.Boolean)">
            <summary>
            Creates a deep copy of the source image.
            </summary>
            <param name="source">The source image.</param>
            <param name="targetFormat">The target pixel format.</param>
            <param name="frameProcessingMode">The frame processing mode.</param>
            <param name="preserveMetaData">Whether to preserve metadata.</param>
            <returns>The <see cref="T:System.Drawing.Bitmap"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Formats.IImageFormat.Save(System.IO.Stream,System.Drawing.Image,ImageProcessor.Formats.BitDepth,System.Int64)">
            <summary>
            Saves the current image to the specified output stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to save the image information to.</param>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to save.</param>
            <param name="bitDepth">The color depth in number of bits per pixel to save the image with.</param>
            <param name="quality">The quality, if applicable, to save the image at.</param>
        </member>
        <member name="T:ImageProcessor.Formats.JpegFormat">
            <summary>
            Provides the necessary information to support jpeg images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.JpegFormat.FileHeaders">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.JpegFormat.FileExtensions">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.JpegFormat.MimeType">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.JpegFormat.ImageFormat">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.JpegFormat.Save(System.IO.Stream,System.Drawing.Image,ImageProcessor.Formats.BitDepth,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Formats.PngFormat">
            <summary>
            Provides the necessary information to support png images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.PngFormat.FileHeaders">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.PngFormat.FileExtensions">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.PngFormat.MimeType">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.PngFormat.ImageFormat">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.PngFormat.Quantizer">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.PngFormat.Save(System.IO.Stream,System.Drawing.Image,ImageProcessor.Formats.BitDepth,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Formats.TiffFormat">
            <summary>
            Provides the necessary information to support tiff images.
            </summary>
        </member>
        <member name="P:ImageProcessor.Formats.TiffFormat.FileHeaders">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.TiffFormat.FileExtensions">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.TiffFormat.MimeType">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.TiffFormat.ImageFormat">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Formats.TiffFormat.Quantizer">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Formats.TiffFormat.Save(System.IO.Stream,System.Drawing.Image,ImageProcessor.Formats.BitDepth,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.FrameProcessingMode">
            <summary>
            Enumerated frame process modes to apply to multiframe images.
            </summary>
        </member>
        <member name="F:ImageProcessor.FrameProcessingMode.All">
            <summary>
            Processes and keeps all the frames of a multiframe image.
            </summary>
        </member>
        <member name="F:ImageProcessor.FrameProcessingMode.First">
            <summary>
            Processes and keeps only the first frame of a multiframe image.
            </summary>
        </member>
        <member name="T:ImageProcessor.ImageFactory">
            <summary>
            Provides a fluent API that allows the processing of images with common operations.
            </summary>
            <content>
            Contains processing methods.
            </content>
        </member>
        <member name="M:ImageProcessor.ImageFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </summary>
        </member>
        <member name="M:ImageProcessor.ImageFactory.#ctor(ImageProcessor.FrameProcessingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </summary>
            <param name="frameProcessingMode">The frame processing mode to use.</param>
        </member>
        <member name="M:ImageProcessor.ImageFactory.#ctor(ImageProcessor.MetadataMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </summary>
            <param name="metadataMode">The metadata mode to use.</param>
        </member>
        <member name="M:ImageProcessor.ImageFactory.#ctor(ImageProcessor.FrameProcessingMode,ImageProcessor.MetadataMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.ImageFactory"/> class.
            </summary>
            <param name="frameProcessingMode">The frame processing mode to use.</param>
            <param name="metadataMode">The metadata mode to use.</param>
        </member>
        <member name="P:ImageProcessor.ImageFactory.Image">
            <summary>
            Gets the loaded image.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.FrameProcessingMode">
            <summary>
            Gets the frame processing mode.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.MetadataMode">
            <summary>
            Gets the metadata mode.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.Quality">
            <summary>
            Gets or sets the quality, if applicable, to save the image at.
            Defaults to 90.
            </summary>
        </member>
        <member name="P:ImageProcessor.ImageFactory.PropertyItems">
            <summary>
            Gets the collection of property items containing metadata.
            </summary>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Load(System.Byte[])">
            <summary>
            Loads the image to process.
            </summary>
            <param name="bytes">The array of bytes containing the encoded image data.</param>
            <returns>The current <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Load(System.String)">
            <summary>
            Loads the image to process.
            </summary>
            <param name="path">The path to the image file.</param>
            <returns>The current <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Load(System.IO.Stream)">
            <summary>
            Loads the image to process.
            </summary>
            <param name="stream">The stream containing the image information.</param>
            <returns>The current <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Reset">
            <summary>
            Resets the factory to its initial loaded state.
            </summary>
            <returns>The current <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Save(System.String)">
            <summary>
            Saves the current image to the specified file path.
            </summary>
            <param name="path">The path to save the image to.</param>
            <returns>The current <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Save(System.String,ImageProcessor.Formats.BitDepth)">
            <summary>
            Saves the current image to the specified file path.
            </summary>
            <param name="path">The path to save the image to.</param>
            <param name="bitDepth">The color depth in bits per pixel.</param>
            <returns>The current <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Save(System.IO.Stream)">
            <summary>
            Saves the current image to the specified output stream.
            </summary>
            <param name="stream">The stream to save the image information to.</param>
            <returns>The current <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Save(System.IO.Stream,ImageProcessor.Formats.BitDepth)">
            <summary>
            Saves the current image to the specified output stream.
            </summary>
            <param name="stream">The stream to save the image information to.</param>
            <param name="bitDepth">The color depth in bits per pixel.</param>
            <returns>The current <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Save(System.IO.Stream,ImageProcessor.Formats.IImageFormat)">
            <summary>
            Saves the current image to the specified output stream.
            </summary>
            <param name="stream">The stream to save the image information to.</param>
            <param name="format">The format which which to encode the image.</param>
            <returns>The current <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Save(System.IO.Stream,ImageProcessor.Formats.IImageFormat,ImageProcessor.Formats.BitDepth)">
            <summary>
            Saves the current image to the specified output stream.
            </summary>
            <param name="stream">The stream to save the image information to.</param>
            <param name="format">The format which which to encode the image.</param>
            <param name="bitDepth">The color depth in bits per pixel.</param>
            <returns>The current <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Alpha(System.Single)">
            <summary>
            Changes the opacity of the current image.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images opacity. Range 0..100.
            </param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.AutoRotate">
            <summary>
            Performs auto-rotation to ensure that EXIF defined rotation is reflected in
            the final image.
            </summary>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.BackgroundColor(System.Drawing.Color)">
            <summary>
            Changes the background color of the current image.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> to paint the image with.</param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Brightness(System.Single)">
            <summary>
            Changes the brightness of the current image.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images brightness. Range -100..100.
            </param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Contrast(System.Single)">
            <summary>
            Changes the contrast of the current image.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images contrast. Range -100..100.
            </param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Crop(System.Drawing.Rectangle)">
            <summary>
            Crops the current image to the given location and size.
            </summary>
            <param name="bounds">The rectangle containing the coordinates to crop the image to.</param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Crop(ImageProcessor.Processing.CropOptions)">
            <summary>
            Crops the current image to the given location and size.
            </summary>
            <param name="options">The settings to crop by.</param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.DetectEdges(ImageProcessor.Processing.EdgeDetectionOperators)">
            <summary>
            Detect edges within the current image converting the image to grayscale before processing.
            </summary>
            <param name="filter">The filter for detecting edges.</param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.DetectEdges(ImageProcessor.Processing.EdgeDetectionOperators,System.Boolean)">
            <summary>
            Detect edges within the current image.
            </summary>
            <param name="filter">The filter for detecting edges.</param>
            <param name="grayscale">Whether to convert the image to grascale before processing.</param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Hue(System.Single)">
            <summary>
            Changes the brightness of the current image.
            </summary>
            <param name="degrees">The rotation angle in degrees to adjust the hue.</param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Pixelate(System.Int32)">
            <summary>
            Pixelates the current image at the given location and size.
            </summary>
            <param name="size">The size of the pixels.</param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Pixelate(ImageProcessor.Processing.PixelateOptions)">
            <summary>
            Pixelates the current image at the given location and size.
            </summary>
            <param name="options">The settings to crop by.</param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Resize(System.Drawing.Size)">
            <summary>
            Resizes the current image to the given dimensions.
            </summary>
            <param name="size">The target width and height.</param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the current image to the given dimensions.
            </summary>
            <param name="width">The target width.</param>
            <param name="height">The target height.</param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Resize(System.Int32,System.Int32,ImageProcessor.Processing.ResizeMode)">
            <summary>
            Resizes the current image to the given dimension using the mode.
            </summary>
            <param name="width">The target width.</param>
            <param name="height">The target height.</param>
            <param name="mode">Thye mode to use to calculate the result.</param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Resize(ImageProcessor.Processing.ResizeOptions)">
            <summary>
            Resizes the current image to the given location and size.
            </summary>
            <param name="options">The settings to resize by.</param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="M:ImageProcessor.ImageFactory.Saturation(System.Single)">
            <summary>
            Changes the saturation of the current image.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images saturation. Range -100..100.
            </param>
            <returns>The <see cref="T:ImageProcessor.ImageFactory"/>.</returns>
        </member>
        <member name="T:ImageProcessor.MetadataMode">
            <summary>
            Enumerates the various metadata modes that control how much metadata information is stored on processing.
            </summary>
        </member>
        <member name="F:ImageProcessor.MetadataMode.All">
            <summary>
            Store no metadata on processing
            </summary>
        </member>
        <member name="F:ImageProcessor.MetadataMode.Copyright">
            <summary>
            Store copyright specific metadata on processing
            </summary>
        </member>
        <member name="F:ImageProcessor.MetadataMode.Geolocation">
            <summary>
            Store geolocation specific metadata on processing
            </summary>
        </member>
        <member name="F:ImageProcessor.MetadataMode.CopyrightAndGeolocation">
            <summary>
            Store copyright and geolocation specific metadata on processing
            </summary>
        </member>
        <member name="F:ImageProcessor.MetadataMode.None">
            <summary>
            Store all metadata on processing
            </summary>
        </member>
        <member name="T:ImageProcessor.Metadata.ExifBitConverter">
            <summary>
            The exif bit converter. Converts based on the endianness of the current machine.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifBitConverter.computerArchitectureInfo">
            <summary>
            The computer architecture info.
            </summary>
        </member>
        <member name="M:ImageProcessor.Metadata.ExifBitConverter.#ctor(ImageProcessor.IComputerArchitectureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Metadata.ExifBitConverter"/> class.
            </summary>
            <param name="computerArchitectureInfo">
            The computer architecture info.
            </param>
        </member>
        <member name="P:ImageProcessor.Metadata.ExifBitConverter.Endianness">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Metadata.ExifBitConverter.IsLittleEndian">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Metadata.ExifBitConverter.GetBytes(System.String,System.Boolean)">
            <summary>
            Converts the given ascii string to an array of bytes optionally adding a null terminator.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="addTerminator">Whether to add a null terminator to the end of the string.</param>
            <returns>The <see cref="T:byte[]"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.ExifBitConverter.GetBytes(System.String)">
            <summary>
            Converts the given ascii string to an array of bytes without adding a null terminator.
            </summary>
            <param name="value">The string to convert.</param>
            <returns>The <see cref="T:byte[]"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.ExifBitConverter.GetBytes(ImageProcessor.Metadata.Rational{System.UInt32})">
            <summary>
            Converts the given unsigned rational number to an array of bytes.
            </summary>
            <param name="value">
            The <see cref="T:Rational{int}"/> containing the numerator and denominator.
            </param>
            <returns>The <see cref="T:byte[]"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.ExifBitConverter.GetBytes(ImageProcessor.Metadata.Rational{System.Int32})">
            <summary>
            Converts the given signed rational number to an array of bytes.
            </summary>
            <param name="value">
            The <see cref="T:Rational{int}"/> containing the numerator and denominator.
            </param>
            <returns>The <see cref="T:byte[]"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.ExifBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Metadata.ExifBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Metadata.ExifPropertyTag">
            <summary>
            The following enum gives descriptions of the property items supported by Windows GDI+.
            <see href="http://msdn.microsoft.com/en-us/library/ms534417%28VS.85%29.aspx"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsVer">
            <summary>
            Version of the Global Positioning Systems (GPS) IFD, given as 2.0.0.0. This tag is mandatory when
            the <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.GpsIFD"/> tag is present. When the version is 2.0.0.0, the tag value is 0x02000000.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsLatitudeRef">
            <summary>
            Null-terminated character string that specifies whether the longitude is east or west longitude.
            E specifies east longitude, and W specifies west longitude.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsLatitude">
            <summary>
            Latitude. Latitude is expressed as three rational values giving the degrees, minutes, and seconds respectively. When degrees, minutes, and seconds are expressed, the format is dd/1, mm/1, ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to two decimal places, the format is dd/1, mmmm/100, 0/1.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsLongitudeRef">
            <summary>
            Null-terminated character string that specifies whether the longitude is east or west longitude.
            E specifies east longitude, and W specifies west longitude.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsLongitude">
            <summary>
            Longitude. Longitude is expressed as three rational values giving the degrees, minutes, and seconds
            respectively. When degrees, minutes and seconds are expressed, the format is ddd/1, mm/1, ss/1.
            When degrees and minutes are used and, for example, fractions of minutes are given up to two
            decimal places, the format is ddd/1, mmmm/100, 0/1.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsAltitudeRef">
            <summary>
            Reference altitude, in meters.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsAltitude">
            <summary>
            Altitude, in meters, based on the reference altitude specified by <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.GpsAltitudeRef"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsGpsTime">
            <summary>
            Time as coordinated universal time (UTC). The value is expressed as three rational numbers that give the hour, minute, and second.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsGpsSatellites">
            <summary>
            Null-terminated character string that specifies the GPS satellites used for measurements. This tag can be used to specify the ID number, angle of elevation, azimuth, SNR, and other information about each satellite. The format is not specified. If the GPS receiver is incapable of taking measurements, the value of the tag must be set to NULL.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsGpsStatus">
            <summary>
            Null-terminated character string that specifies the status of the GPS receiver when the image is recorded. A means measurement is in progress, and V means the measurement is Interoperability.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsGpsMeasureMode">
            <summary>
            Null-terminated character string that specifies the GPS measurement mode. 2 specifies 2-D measurement, and 3 specifies 3-D measurement.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsGpsDop">
            <summary>
            GPS DOP (data degree of precision). An HDOP value is written during 2-D measurement, and a PDOP value is written during 3-D measurement.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsSpeedRef">
            <summary>
            Null-terminated character string that specifies the unit used to express the GPS receiver speed of movement.
            K, M, and N represent kilometers per hour, miles per hour, and knots respectively.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsSpeed">
            <summary>
            Speed of the GPS receiver movement.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsTrackRef">
            <summary>
            Null-terminated character string that specifies the reference for giving the direction of
            GPS receiver movement. T specifies true direction, and M specifies magnetic direction.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsTrack">
            <summary>
            Direction of GPS receiver movement. The range of values is from 0.00 to 359.99.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsImgDirRef">
            <summary>
            Null-terminated character string that specifies the reference for the direction of the image when it is captured. T specifies true direction, and M specifies magnetic direction.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsImgDir">
            <summary>
            Direction of the image when it was captured. The range of values is from 0.00 to 359.99.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsMapDatum">
            <summary>
            Null-terminated character string that specifies geodetic survey data used by the GPS receiver.
            If the survey data is restricted to Japan, the value of this tag is TOKYO or WGS-84.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsDestLatRef">
            <summary>
            Null-terminated character string that specifies whether the latitude of the destination point is north or south
            latitude. N specifies north latitude, and S specifies south latitude.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsDestLat">
            <summary>
            Latitude of the destination point. The latitude is expressed as three rational values giving the degrees,
            minutes, and seconds respectively. When degrees, minutes, and seconds are expressed, the format is
            dd/1, mm/1, ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to
            two decimal places, the format is dd/1, mmmm/100, 0/1.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsDestLongRef">
            <summary>
            Null-terminated character string that specifies whether the longitude of the destination point is east or west longitude. E specifies east longitude, and W specifies west longitude.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsDestLong">
            <summary>
            Longitude of the destination point. The longitude is expressed as three rational values giving the degrees, minutes, and seconds respectively. When degrees, minutes, and seconds are expressed, the format is ddd/1, mm/1, ss/1. When degrees and minutes are used and, for example, fractions of minutes are given up to two decimal places, the format is ddd/1, mmmm/100, 0/1.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsDestBearRef">
            <summary>
            Null-terminated character string that specifies the reference used for giving the bearing to the destination point. T specifies true direction, and M specifies magnetic direction.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsDestBear">
            <summary>
            Bearing to the destination point. The range of values is from 0.00 to 359.99.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsDestDistRef">
            <summary>
            Null-terminated character string that specifies the unit used to express the distance to the destination point.
            K, M, and N represent kilometers, miles, and knots respectively.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsDestDist">
            <summary>
            Distance to the destination point.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.NewSubfileType">
            <summary>
            Type of data in a subfile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.SubfileType">
            <summary>
            The type of data in a subfile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ImageWidth">
            <summary>
            Number of pixels per row.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ImageHeight">
            <summary>
            Number of pixel rows.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.BitsPerSample">
            <summary>
            Number of bits per color component. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.SamplesPerPixel"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.Compression">
            <summary>
            Compression scheme used for the image data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PhotometricInterp">
            <summary>
            How pixel data will be interpreted.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThreshHolding">
            <summary>
            Technique used to convert from gray pixels to black and white pixels.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.CellWidth">
            <summary>
            Width of the dithering or halftoning matrix.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.CellHeight">
            <summary>
            Height of the dithering or halftoning matrix.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.FillOrder">
            <summary>
            Logical order of bits in a byte.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.DocumentName">
            <summary>
            Null-terminated character string that specifies the name of the document from
            which the image was scanned.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ImageDescription">
            <summary>
            Null-terminated character string that specifies the title of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.EquipMake">
            <summary>
            Null-terminated character string that specifies the manufacturer of the
            equipment used to record the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.EquipModel">
            <summary>
            Null-terminated character string that specifies the model name or model number
            of the equipment used to record the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.StripOffsets">
            <summary>
            For each strip, the byte offset of that strip. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.RowsPerStrip"/>
            and <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.StripBytesCount"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.Orientation">
            <summary>
            Image orientation viewed in terms of rows and columns.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.SamplesPerPixel">
            <summary>
            Number of color components per pixel.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.RowsPerStrip">
            <summary>
            Number of rows per strip. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.StripBytesCount"/> and <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.StripOffsets"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.StripBytesCount">
            <summary>
            For each strip, the total number of bytes in that strip.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.MinSampleValue">
            <summary>
            For each color component, the minimum value assigned to that component.
            See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.MaxSampleValue">
            <summary>
            For each color component, the maximum value assigned to that component.
            See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.XResolution">
            <summary>
            Number of pixels per unit in the image width (x) direction.
            The unit is specified by <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.YResolution">
            <summary>
            Number of pixels per unit in the image height (y) direction. The unit is specified
            by <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PlanarConfig">
            <summary>
            Whether pixel components are recorded in chunky or planar format.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PageName">
            <summary>
            Null-terminated character string that specifies the name of the page from which the image was scanned.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.XPosition">
            <summary>
            Offset from the left side of the page to the left side of the image.
            The unit of measure is specified by <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.YPosition">
            <summary>
            Offset from the top of the page to the top of the image. The unit of measure
            is specified by <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.FreeOffset">
            <summary>
            For each string of contiguous unused bytes, the byte offset of that string.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.FreeByteCounts">
            <summary>
            For each string of contiguous unused bytes, the number of bytes in that string.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GrayResponseUnit">
            <summary>
            Precision of the number specified by <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.GrayResponseCurve"/>. 1 specifies tenths,
            2 specifies hundredths, 3 specifies thousandths, and so on.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GrayResponseCurve">
            <summary>
            For each possible pixel value in a grayscale image, the optical density of that pixel value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.T4Option">
            <summary>
            Set of flags that relate to T4 encoding.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.T6Option">
            <summary>
            Set of flags that relate to T6 encoding.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ResolutionUnit">
            <summary>
            Unit of measure for the horizontal resolution and the vertical resolution.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PageNumber">
            <summary>
            Page number of the page from which the image was scanned.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.TransferFunction">
            <summary>
            Tables that specify transfer functions for the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.SoftwareUsed">
            <summary>
            Null-terminated character string that specifies the name and version of the software or
            firmware of the device used to generate the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.DateTime">
            <summary>
            Date and time the image was created.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.Artist">
            <summary>
            Null-terminated character string that specifies the name of the person who created the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.HostComputer">
            <summary>
            Null-terminated character string that specifies the computer and/or operating system used to create the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.Predictor">
            <summary>
            TType of prediction scheme that was applied to the image data before the encoding scheme was applied.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.WhitePoint">
            <summary>
            Chromaticity of the white point of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PrimaryChromaticities">
            <summary>
            For each of the three primary colors in the image, the chromaticity of that color.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ColorMap">
            <summary>
            Color palette (lookup table) for a palette-indexed image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.HalftoneHints">
            <summary>
            Information used by the halftone function.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.TileWidth">
            <summary>
            Number of pixel columns in each tile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.TileLength">
            <summary>
            Number of pixel rows in each tile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.TileOffset">
            <summary>
            For each tile, the byte offset of that tile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.TileByteCounts">
            <summary>
            For each tile, the number of bytes in that tile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.InkSet">
            <summary>
            Set of inks used in a separated image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.InkNames">
            <summary>
            Sequence of concatenated, null-terminated, character strings that specify the names of the
            inks used in a separated image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.NumberOfInks">
            <summary>
            The number of inks.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.DotRange">
            <summary>
            Color component values that correspond to a 0 percent dot and a 100 percent dot.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.TargetPrinter">
            <summary>
            Null-terminated character string that describes the intended printing environment.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExtraSamples">
            <summary>
            Number of extra color components. For example, one extra component might hold an alpha value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.SampleFormat">
            <summary>
            For each color component, the numerical format (unsigned, signed, floating point) of that component.
            See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.SMinSampleValue">
            <summary>
            For each color component, the minimum value of that component. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.SMaxSampleValue">
            <summary>
            For each color component, the maximum value of that component. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.TransferRange">
            <summary>
            Table of values that extends the range of the transfer function.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.JPEGProc">
            <summary>
            JPEG compression process.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.JPEGInterFormat">
            <summary>
            Offset to the start of a JPEG bitstream.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.JPEGInterLength">
            <summary>
            Length, in bytes, of the JPEG bitstream.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.JPEGRestartInterval">
            <summary>
            Length of the restart interval.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.JPEGLosslessPredictors">
            <summary>
            For each color component, a lossless predictor-selection value for that component.
            See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.JPEGPointTransforms">
            <summary>
            For each color component, a point transformation value for that component.
            See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.JPEGQTables">
            <summary>
            For each color component, the offset to the quantization table for that
            component. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.JPEGDCTables">
            <summary>
            For each color component, the offset to the DC Huffman table (or lossless Huffman table) for that
            component. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.JPEGACTables">
            <summary>
            For each color component, the offset to the AC Huffman table for that component.
            See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.SamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.YCbCrCoefficients">
            <summary>
            Coefficients for transformation from RGB to YCbCr image data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.YCbCrSubsampling">
            <summary>
            Sampling ratio of chrominance components in relation to the luminance component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.YCbCrPositioning">
            <summary>
            Position of chrominance components in relation to the luminance component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.REFBlackWhite">
            <summary>
            Reference black point value and reference white point value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.Gamma">
            <summary>
            Gamma value attached to the image. The gamma value is stored as a rational number (pair of long) with a numerator of 100000. For example, a gamma value of 2.2 is stored as the pair (100000, 45455).
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ICCProfileDescriptor">
            <summary>
            Null-terminated character string that identifies an ICC profile.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.SRGBRenderingIntent">
            <summary>
            How the image should be displayed as defined by the International Color Consortium (ICC). If a GDI+ Image object
            is constructed with the useEmbeddedColorManagement parameter set to TRUE, then GDI+ renders the image
            according to the specified rendering intent. The intent can be set to perceptual, relative colorimetric,
            saturation, or absolute colorimetric.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ImageTitle">
            <summary>
            Null-terminated character string that specifies the title of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ResolutionXUnit">
            <summary>
            Units in which to display horizontal resolution.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ResolutionYUnit">
            <summary>
            Units in which to display vertical resolution.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ResolutionXLengthUnit">
            <summary>
            Units in which to display the image width.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ResolutionYLengthUnit">
            <summary>
            Units in which to display the image height.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PrintFlags">
            <summary>
            Sequence of one-byte Boolean values that specify printing options.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PrintFlagsVersion">
            <summary>
            The print flags version.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PrintFlagsCrop">
            <summary>
            The print flags crop marks.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PrintFlagsBleedWidth">
            <summary>
            The print flags bleed width.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PrintFlagsBleedWidthScale">
            <summary>
            The print flags bleed width scale.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.HalftoneLPI">
            <summary>
            Ink's screen frequency, in lines per inch.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.HalftoneLPIUnit">
            <summary>
            Units for the screen frequency.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.HalftoneDegree">
            <summary>
            Angle for screen.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.HalftoneShape">
            <summary>
            Shape of the halftone dots.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.HalftoneMisc">
            <summary>
            Miscellaneous halftone information.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.HalftoneScreen">
            <summary>
            Boolean value that specifies whether to use the printer's default screens.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.JPEGQuality">
            <summary>
            Private tag used by the Adobe Photoshop format. Not for public use.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GridSize">
            <summary>
            Block of information about grids and guides.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailFormat">
            <summary>
            Format of the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailWidth">
            <summary>
            Width, in pixels, of the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailHeight">
            <summary>
            Height, in pixels, of the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailColorDepth">
            <summary>
            Bits per pixel (BPP) for the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailPlanes">
            <summary>
            Number of color planes for the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailRawBytes">
            <summary>
            Byte offset between rows of pixel data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailSize">
            <summary>
            Total size, in bytes, of the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailCompressedSize">
            <summary>
            Compressed size, in bytes, of the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ColorTransferFunction">
            <summary>
            Table of values that specify color transfer functions.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailData">
            <summary>
            Raw thumbnail bits in JPEG or RGB format. Depends on <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailFormat"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailImageWidth">
            <summary>
            Number of pixels per row in the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailImageHeight">
            <summary>
            Number of pixel rows in the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailBitsPerSample">
            <summary>
            Number of bits per color component in the thumbnail image. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailSamplesPerPixel"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailCompression">
            <summary>
            Compression scheme used for thumbnail image data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailPhotometricInterp">
            <summary>
            How thumbnail pixel data will be interpreted.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailImageDescription">
            <summary>
            Null-terminated character string that specifies the title of the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailEquipMake">
            <summary>
            Null-terminated character string that specifies the manufacturer of the equipment used to
            record the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailEquipModel">
            <summary>
            Null-terminated character string that specifies the model name or model number of the
            equipment used to record the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailStripOffsets">
            <summary>
            For each strip in the thumbnail image, the byte offset of that strip. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailRowsPerStrip"/>
            and <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailStripBytesCount"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailOrientation">
            <summary>
            Thumbnail image orientation in terms of rows and columns. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.Orientation"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailSamplesPerPixel">
            <summary>
            Number of color components per pixel in the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailRowsPerStrip">
            <summary>
            Number of rows per strip in the thumbnail image. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailStripBytesCount"/>
            and <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailStripOffsets"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailStripBytesCount">
            <summary>
            For each thumbnail image strip, the total number of bytes in that strip.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailResolutionX">
            <summary>
            Thumbnail resolution in the width direction.
            The resolution unit is given in <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailResolutionY">
            <summary>
            Thumbnail resolution in the height direction. The resolution unit is given
            in <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailPlanarConfig">
            <summary>
            Whether pixel components in the thumbnail image are recorded in chunky or planar format.
            See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.PlanarConfig"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailResolutionUnit">
            <summary>
            Unit of measure for the horizontal resolution and the vertical resolution of
            the thumbnail image. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ResolutionUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailTransferFunction">
            <summary>
            Tables that specify transfer functions for the thumbnail image. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.TransferFunction"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailSoftwareUsed">
            <summary>
            Null-terminated character string that specifies the name and version of the software
            or firmware of the device used to generate the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailDateTime">
            <summary>
            Date and time the thumbnail image was created. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.DateTime"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailArtist">
            <summary>
            Null-terminated character string that specifies the name of the person who created the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailWhitePoint">
            <summary>
            Chromaticity of the white point of the thumbnail image. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.WhitePoint"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailPrimaryChromaticities">
            <summary>
            For each of the three primary colors in the thumbnail image, the chromaticity
            of that color. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.PrimaryChromaticities"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailYCbCrCoefficients">
            <summary>
            Coefficients for transformation from RGB to YCbCr data for the thumbnail image.
            See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.YCbCrCoefficients"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailYCbCrSubsampling">
            <summary>
            Sampling ratio of chrominance components in relation to the luminance component for
            the thumbnail image. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.YCbCrSubsampling"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailYCbCrPositioning">
            <summary>
            Position of chrominance components in relation to the luminance component for
            the thumbnail image. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.YCbCrPositioning"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailRefBlackWhite">
            <summary>
            Reference black point value and reference white point value
            for the thumbnail image. See also <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.REFBlackWhite"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ThumbnailCopyRight">
            <summary>
            Null-terminated character string that contains copyright information for the thumbnail image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.LuminanceTable">
            <summary>
            Luminance table. The luminance table and the chrominance table are used to control JPEG quality.
            A valid luminance or chrominance table has 64 entries of type <see cref="F:ImageProcessor.Metadata.ExifPropertyTagType.UShort"/>.
            If an image has either a luminance table or a chrominance table, then it must have both tables.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ChrominanceTable">
            <summary>
            Chrominance table. The luminance table and the chrominance table are used to control JPEG quality.
            A valid luminance or chrominance table has 64 entries.
            If an image has either a luminance table or a chrominance table, then it must have both tables.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.FrameDelay">
            <summary>
            Time delay, in hundredths of a second, between two frames in an animated GIF image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.LoopCount">
            <summary>
            For an animated GIF image, the number of times to display the animation.
            A value of 0 specifies that the animation should be displayed infinitely.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GlobalPalette">
            <summary>
            Color palette for an indexed bitmap in a GIF image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.IndexBackground">
            <summary>
            Index of the background color in the palette of a GIF image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.IndexTransparent">
            <summary>
            Index of the transparent color in the palette of a GIF image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PixelUnit">
            <summary>
            Unit for <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.PixelPerUnitX"/> and <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.PixelPerUnitY"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PixelPerUnitX">
            <summary>
            Pixels per unit in the x direction.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PixelPerUnitY">
            <summary>
            Pixels per unit in the y direction.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.PaletteHistogram">
            <summary>
            The palette histogram.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.Copyright">
            <summary>
            Null-terminated character string that contains copyright information.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifExposureTime">
            <summary>
            Exposure time, measured in seconds.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFNumber">
            <summary>
            F number.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifIFD">
            <summary>
            Private tag used by GDI+. Not for public use. GDI+ uses this tag to locate Exif specific information.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ICCProfile">
            <summary>
            ICC profile embedded in the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifExposureProg">
            <summary>
            Class of the program used by the camera to set exposure when the picture is taken.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifSpectralSense">
            <summary>
            Null-terminated character string that specifies the spectral sensitivity of each channel of the camera used. The string is compatible with the standard developed by the ASTM Technical Committee.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.GpsIFD">
            <summary>
            Offset to a block of GPS property items. Property items whose tags have the prefix Gps are stored in the GPS block.
            The GPS property items are defined in the EXIF specification. GDI+ uses this tag to locate GPS information,
            but GDI+ does not expose this tag for public use.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifISOSpeed">
            <summary>
            ISO speed and ISO latitude of the camera or input device as specified in ISO 12232.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifOECF">
            <summary>
            Optoelectronic conversion function (OECF) specified in ISO 14524. The OECF is the relationship between the camera optical input and the image values.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifVer">
            <summary>
            Version of the EXIF standard supported. Nonexistence of this field is taken to mean non-conformance to the
            standard. Conformance to the standard is indicated by recording 0210 as a 4-byte ASCII string.
            Because the type is <see cref="F:ImageProcessor.Metadata.ExifPropertyTagType.Undefined"/>, there is no NULL terminator.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifDTOrig">
            <summary>
            Date and time when the original image data was generated. For a DSC, the date and time when the picture was taken. The format is YYYY:MM:DD HH:MM:SS with time shown in 24-hour format and the date and time separated by one blank character (0x2000). The character string length is 20 bytes including the NULL terminator. When the field is empty, it is treated as unknown.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifDTDigitized">
            <summary>
            Date and time when the image was stored as digital data. If, for example, an image
            was captured by DSC and at the same time the file was recorded, then DateTimeOriginal
            and DateTimeDigitized will have the same contents.
            <para>
            The format is YYYY:MM:DD HH:MM:SS with time shown in 24-hour format and the date and
            time separated by one blank character (0x2000). The character string length is 20 bytes
            including the NULL terminator. When the field is empty, it is treated as unknown.
            </para>
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifCompConfig">
            <summary>
            Information specific to compressed data. The channels of each component are
            arranged in order from the first component to the fourth. For
            uncompressed data, the data arrangement is given in the
            PhotometricInterp tag.
            <para>
            However, because PhotometricInterp can only express the order of Y, Cb, and Cr,
            this tag is provided for cases when compressed data uses components other than
            Y, Cb, and Cr and to support other sequences.
            </para>
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifCompBPP">
            <summary>
            Information specific to compressed data. The compression mode used for a
            compressed image is indicated in unit BPP.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifShutterSpeed">
            <summary>
            Shutter speed. The unit is the Additive System of Photographic Exposure (APEX) value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifAperture">
            <summary>
            Lens aperture. The unit is the APEX value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifBrightness">
            <summary>
            Brightness value. The unit is the APEX value. Ordinarily it is given
            in the range of -99.99 to 99.99.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifExposureBias">
            <summary>
            Exposure bias. The unit is the APEX value. Ordinarily it is given in the range -99.99 to 99.99.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifMaxAperture">
            <summary>
            Smallest F number of the lens. The unit is the APEX value. Ordinarily it is given in the range of 00.00 to 99.99, but it is not limited to this range.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifSubjectDist">
            <summary>
            Distance to the subject, measured in meters.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifMeteringMode">
            <summary>
            Metering mode.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifLightSource">
            <summary>
            Type of light source.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFlash">
            <summary>
            Flash status. This tag is recorded when an image is taken using a strobe light (flash). Bit 0 indicates the flash firing status, and bits 1 and 2 indicate the flash return status.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFocalLength">
            <summary>
            Actual focal length, in millimeters, of the lens. Conversion is not made to the focal length of a 35 millimeter film camera.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifMakerNote">
            <summary>
            Note tag. A tag used by manufacturers of EXIF writers to record information. The contents are up to the manufacturer.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifUserComment">
            <summary>
            Comment tag. A tag used by EXIF users to write keywords or comments about the image besides those
            in <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ImageDescription"/> and without the character-code limitations of
            the <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ImageDescription"/> tag.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifDTSubsec">
            <summary>
            Null-terminated character string that specifies a fraction of a second for the <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.DateTime"/> tag.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifDTOrigSS">
            <summary>
            Null-terminated character string that specifies a fraction of a second for the <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ExifDTOrig"/> tag.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifDTDigSS">
            <summary>
            Null-terminated character string that specifies a fraction of a second for the ExifDTDigitized tag.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFPXVer">
            <summary>
            FlashPix format version supported by an FPXR file. If the FPXR function supports FlashPix format version 1.0,
            this is indicated similarly to <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ExifVer"/> by recording 0100 as a 4-byte ASCII string.
            Because the type is <see cref="F:ImageProcessor.Metadata.ExifPropertyTagType.Undefined"/>, there is no NULL terminator.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifColorSpace">
            <summary>
            Color space specifier. Normally sRGB (=1) is used to define the color space
            based on the PC monitor conditions and environment. If a color space other
            than sRGB is used, Uncalibrated (=0xFFFF) is set. Image data recorded as
            Uncalibrated can be treated as sRGB when it is converted to FlashPix.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifPixXDim">
            <summary>
            Information specific to compressed data. When a compressed file is recorded, the valid width of the meaningful image must be recorded in this tag, whether or not there is padding data or a restart marker. This tag should not exist in an uncompressed file.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifPixYDim">
            <summary>
            Information specific to compressed data. When a compressed file is recorded, the valid height of the meaningful image must be recorded in this tag whether or not there is padding data or a restart marker. This tag should not exist in an uncompressed file. Because data padding is unnecessary in the vertical direction, the number of lines recorded in this valid image height tag will be the same as that recorded in the SOF.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifRelatedWav">
            <summary>
            The name of an audio file related to the image data. The only relational information recorded is the EXIF audio file name and extension (an ASCII string that consists of 8 characters plus a period (.), plus 3 characters). The path is not recorded. When you use this tag, audio files must be recorded in conformance with the EXIF audio format. Writers can also store audio data within APP2 as FlashPix extension stream data.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifInterop">
            <summary>
            Offset to a block of property items that contain interoperability information.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFlashEnergy">
            <summary>
            Strobe energy, in Beam Candle Power Seconds (BCPS), at the time the image was captured.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifSpatialFR">
            <summary>
            Camera or input device spatial frequency table and SFR values in the image width, image height, and diagonal direction, as specified in ISO 12233.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFocalXRes">
            <summary>
            Number of pixels in the image width (x) direction per unit on the camera focal plane. The unit is specified
            in <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFocalResUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFocalYRes">
            <summary>
            Number of pixels in the image height (y) direction per unit on the camera focal plane. The unit is specified
            in <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFocalResUnit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFocalResUnit">
            <summary>
            Unit of measure for <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFocalXRes"/> and <see cref="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFocalYRes"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifSubjectLoc">
            <summary>
            Location of the main subject in the scene. The value of this tag represents the pixel at the center
            of the main subject relative to the left edge. The first value indicates the column number, and
            the second value indicates the row number.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifExposureIndex">
            <summary>
            Exposure index selected on the camera or input device at the time the image was captured.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifSensingMethod">
            <summary>
            Image sensor type on the camera or input device.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifFileSource">
            <summary>
            The image source. If a DSC recorded the image, the value of this tag is 3.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifSceneType">
            <summary>
            The type of scene. If a DSC recorded the image, the value of this tag must be set to 1, indicating that the image was directly photographed.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTag.ExifCfaPattern">
            <summary>
            The color filter array (CFA) geometric pattern of the image sensor when a one-chip color
            area sensor is used. It does not apply to all sensing methods.
            </summary>
        </member>
        <member name="T:ImageProcessor.Metadata.ExifPropertyTagConstants">
            <summary>
            Contains constants grouping together common property items.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagConstants.RequiredPropertyItems">
            <summary>
            Gets all required property items. The Gif format specifically requires these properties.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagConstants.GeolocationPropertyItems">
            <summary>
            Gets all required property items plus geolocation specific property items.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagConstants.CopyrightPropertyItems">
            <summary>
            Gets all required property items plus copyright specific property items.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagConstants.CopyrightAndGeolocationPropertyItems">
            <summary>
            Gets all required property items plus copyright and geolocation specific property items.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagConstants.All">
            <summary>
            Gets all known property items.
            </summary>
        </member>
        <member name="T:ImageProcessor.Metadata.ExifPropertyTagType">
            <summary>
            Specifies the data type of the values stored in the value data member of that same PropertyItem object.
            <see href="http://msdn.microsoft.com/en-us/library/system.drawing.imaging.propertyitem.type.aspx"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagType.Byte">
            <summary>
            Specifies that the value data member is an array of bytes.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagType.ASCII">
            <summary>
            Specifies that the value data member is a null-terminated ASCII string. If you set the type data member of a
            PropertyItem object to ExifPropertyTagTypeASCII, you should set the length data member to the length of the string
            including the NULL terminator. For example, the string HELLO would have a length of 6.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagType.UShort">
            <summary>
            Specifies that the value data member is an array of unsigned short (16-bit) integers.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagType.ULong">
            <summary>
            Specifies that the value data member is an array of unsigned long (32-bit) integers.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagType.Rational">
            <summary>
            Specifies that the value data member is an array of pairs of unsigned long integers. Each pair represents a
            fraction; the first integer is the numerator and the second integer is the denominator.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagType.Undefined">
            <summary>
            Specifies that the value data member is an array of bytes that can hold values of any data type.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagType.SLong">
            <summary>
            Specifies that the value data member is an array of signed long (32-bit) integers.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ExifPropertyTagType.SRational">
            <summary>
            Specifies that the value data member is an array of pairs of signed long integers. Each pair represents a
            fraction; the first integer is the numerator and the second integer is the denominator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Metadata.ImageFactoryMetaExtensions">
            <summary>
            Extension methods for writing EXIF metadata to the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.ImageFactoryMetaExtensions.BitConverter">
            <summary>
            The converter for converting inputs into byte arrays.
            </summary>
        </member>
        <member name="M:ImageProcessor.Metadata.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Metadata.ExifPropertyTag,System.Byte)">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Metadata.ExifPropertyTag,System.String)">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Metadata.ExifPropertyTag,System.UInt16)">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Metadata.ExifPropertyTag,System.UInt32)">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Metadata.ExifPropertyTag,ImageProcessor.Metadata.Rational{System.UInt32})">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Metadata.ExifPropertyTag,System.Byte[])">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Metadata.ExifPropertyTag,System.Int32)">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Metadata.ExifPropertyTag,ImageProcessor.Metadata.Rational{System.Int32})">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.ImageFactoryMetaExtensions.SetPropertyItem(ImageProcessor.ImageFactory,ImageProcessor.Metadata.ExifPropertyTag,ImageProcessor.Metadata.ExifPropertyTagType,System.Int32,System.Byte[])">
            <summary>
            Sets a property item with the given id to the collection within the current
            <see cref="T:ImageProcessor.ImageFactory"/> instance.
            </summary>
            <param name="imageFactory">The image factory.</param>
            <param name="id">The id to assign to the property item.</param>
            <param name="type">The type to assign to the property item.</param>
            <param name="length">The length to assign to the property item.</param>
            <param name="value">The value to assign to the property item.</param>
            <returns>
            The <see cref="T:ImageProcessor.ImageFactory"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Metadata.Int32Converter">
            <summary>
            Provides a way to convert integers to an array of bytes without creating multiple
            short term arrays.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.Int32Converter.Value">
            <summary>
            The value of the byte array as an integer.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.Int32Converter.Byte1">
            <summary>
            The first byte.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.Int32Converter.Byte2">
            <summary>
            The second byte.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.Int32Converter.Byte3">
            <summary>
            The third byte.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.Int32Converter.Byte4">
            <summary>
            The fourth byte.
            </summary>
        </member>
        <member name="M:ImageProcessor.Metadata.Int32Converter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Metadata.Int32Converter"/> struct.
            </summary>
            <param name="value">
            The value to convert from.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Int32Converter.op_Implicit(ImageProcessor.Metadata.Int32Converter)~System.Int32">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:ImageProcessor.Metadata.Int32Converter"/> to a <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">
            The instance of <see cref="T:ImageProcessor.Metadata.Int32Converter"/> to convert.
            </param>
            <returns>An instance of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Int32Converter.op_Implicit(System.Int32)~ImageProcessor.Metadata.Int32Converter">
            <summary>
            Allows the implicit conversion of an instance of <see cref="T:System.Int32"/> to a <see cref="T:ImageProcessor.Metadata.Int32Converter"/>.
            </summary>
            <param name="value">The instance of <see cref="T:System.Int32"/> to convert.</param>
            <returns>An instance of <see cref="T:ImageProcessor.Metadata.Int32Converter"/>.</returns>
        </member>
        <member name="T:ImageProcessor.Metadata.PropertyTagResolutionUnit">
            <summary>
            The following enum gives the unit of measure for the horizontal resolution and the vertical resolution
            supported by Windows GDI+.
            <see href="https://msdn.microsoft.com/en-us/library/ms534416(v=vs.85).aspx#_gdiplus_constant_propertytagresolutionunit"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.PropertyTagResolutionUnit.Inch">
            <summary>
            The resolution is measured in pixels per inch.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.PropertyTagResolutionUnit.Cm">
            <summary>
            The resolution is measured in pixels per centimeter.
            </summary>
        </member>
        <member name="T:ImageProcessor.Metadata.Rational`1">
            <summary>
            Represents a rational number. Any number that can be expressed as the quotient or fraction p/q of two
            numbers, p and q, with the denominator q not equal to zero.
            <remarks>
            Adapted from <see href="https://github.com/mckamey/exif-utils.net"/> by Stephen McKamey.
            </remarks>
            </summary>
            <typeparam name="T">The type to assign to the numerator and denominator components.</typeparam>
        </member>
        <member name="F:ImageProcessor.Metadata.Rational`1.Empty">
            <summary>
            Represents an empty instance of <see cref="T:ImageProcessor.Metadata.Rational`1"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.Rational`1.Delim">
            <summary>
            The delimiter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.Rational`1.DelimSet">
            <summary>
            The array containing the delimiter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.Rational`1.parser">
            <summary>
            The parser delegate method.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.Rational`1.tryParser">
            <summary>
            The try parser delegate method.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.Rational`1.maxValue">
            <summary>
            The max value.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.Rational`1.numerator">
            <summary>
            The numerator.
            </summary>
        </member>
        <member name="F:ImageProcessor.Metadata.Rational`1.denominator">
            <summary>
            The denominator.
            </summary>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Metadata.Rational`1"/> struct.
            </summary>
            <param name="numerator">The numerator of the rational number.</param>
            <param name="denominator">The denominator of the rational number.</param>
            <remarks>
            Reduces by default.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.#ctor(`0,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Metadata.Rational`1"/> struct.
            </summary>
            <param name="numerator">The numerator of the rational number.</param>
            <param name="denominator">The denominator of the rational number.</param>
            <param name="reduce">determines if should reduce by greatest common divisor.</param>
        </member>
        <member name="T:ImageProcessor.Metadata.Rational`1.ParseDelegate">
            <summary>
            The parse delegate method.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>
            The <see cref="T:ImageProcessor.Metadata.Rational`1"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Metadata.Rational`1.TryParseDelegate">
            <summary>
            The try parse delegate method.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="rational">The parsed result.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="P:ImageProcessor.Metadata.Rational`1.Numerator">
            <summary>
            Gets and sets the numerator of the rational number.
            </summary>
        </member>
        <member name="P:ImageProcessor.Metadata.Rational`1.Denominator">
            <summary>
            Gets and sets the denominator of the rational number.
            </summary>
        </member>
        <member name="P:ImageProcessor.Metadata.Rational`1.IsEmpty">
            <summary>
            Gets a value indicating whether the current instance is empty.
            </summary>
        </member>
        <member name="P:ImageProcessor.Metadata.Rational`1.MaxValue">
            <summary>
            Gets the MaxValue.
            </summary>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.op_UnaryNegation(ImageProcessor.Metadata.Rational{`0})">
            <summary>
            Performs a numeric negation of the operand.
            </summary>
            <param name="rational">The rational to negate.</param>
            <returns>
            The negated rational.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.op_Addition(ImageProcessor.Metadata.Rational{`0},ImageProcessor.Metadata.Rational{`0})">
            <summary>
            Computes the sum of two rational instances.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed sum.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.op_Subtraction(ImageProcessor.Metadata.Rational{`0},ImageProcessor.Metadata.Rational{`0})">
            <summary>
            Computes the subtraction of one rational instance from another.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.op_Multiply(ImageProcessor.Metadata.Rational{`0},ImageProcessor.Metadata.Rational{`0})">
            <summary>
            Computes the product of multiplying two rational instances.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed product.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.op_Division(ImageProcessor.Metadata.Rational{`0},ImageProcessor.Metadata.Rational{`0})">
            <summary>
            Computes the product of dividing two rational instances.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed product.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.op_LessThan(ImageProcessor.Metadata.Rational{`0},ImageProcessor.Metadata.Rational{`0})">
            <summary>
            Determines whether the first rational operand is less than the second.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.op_LessThanOrEqual(ImageProcessor.Metadata.Rational{`0},ImageProcessor.Metadata.Rational{`0})">
            <summary>
            Determines whether the first rational operand is less than or equal to the second.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.op_GreaterThan(ImageProcessor.Metadata.Rational{`0},ImageProcessor.Metadata.Rational{`0})">
            <summary>
            Determines whether the first rational operand is greater than the second.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.op_GreaterThanOrEqual(ImageProcessor.Metadata.Rational{`0},ImageProcessor.Metadata.Rational{`0})">
            <summary>
            Determines whether the first rational operand is greater than or equal to the second.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.op_Equality(ImageProcessor.Metadata.Rational{`0},ImageProcessor.Metadata.Rational{`0})">
            <summary>
            Determines whether the first rational operand is equal to the second.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.op_Inequality(ImageProcessor.Metadata.Rational{`0},ImageProcessor.Metadata.Rational{`0})">
            <summary>
            Determines whether the first rational operand is not equal to the second.
            </summary>
            <param name="r1">The first rational operand.</param>
            <param name="r2">The second rational operand.</param>
            <returns>The computed result.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.Approximate(System.Decimal)">
            <summary>
            Approximate the decimal value accurate to a precision of 0.000001m.
            </summary>
            <param name="value">decimal value to approximate.</param>
            <returns>an approximation of the value as a rational number.</returns>
            <remarks>
            <see href="http://stackoverflow.com/questions/95727"/>.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.Approximate(System.Decimal,System.Decimal)">
            <summary>
            Approximate the decimal value accurate to a certain precision.
            </summary>
            <param name="value">decimal value to approximate.</param>
            <param name="epsilon">maximum precision to converge.</param>
            <returns>an approximation of the value as a rational number.</returns>
            <remarks>
            <see href="http://stackoverflow.com/questions/95727"/>.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:ImageProcessor.Metadata.Rational`1"/> equivalent.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>
            The <see cref="T:ImageProcessor.Metadata.Rational`1"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.TryParse(System.String,ImageProcessor.Metadata.Rational{`0}@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:ImageProcessor.Metadata.Rational`1"/> equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="rational">The converted <see cref="T:ImageProcessor.Metadata.Rational`1"/>.</param>
            <returns>
            The <see cref="T:ImageProcessor.Metadata.Rational`1"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.BuildParser">
            <summary>
            Builds a parser to convert objects.
            </summary>
            <returns>
            The <see cref="T:ImageProcessor.Metadata.Rational`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the underlying rational type does not support a parse method.
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
            Thrown when a reflection error occurs.
            </exception>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.BuildTryParser">
            <summary>
            Tries to build a parser to convert objects.
            </summary>
            <returns>
            The <see cref="T:ImageProcessor.Metadata.Rational`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the underlying rational type does not support a parse method.
            </exception>
            <exception cref="T:System.Reflection.TargetInvocationException">
            Thrown when a reflection error occurs.
            </exception>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.Reduce">
            <summary>
            Finds the greatest common divisor and reduces the fraction by this amount.
            </summary>
            <returns>the reduced rational.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.Reduce(`0@,`0@)">
            <summary>
            Finds the greatest common divisor and reduces the fraction by this amount.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.Lcd(System.Decimal,System.Decimal)">
            <summary>
            The least common multiple of the denominators of a set of fractions.
            </summary>
            <param name="a">The first decimal.</param>
            <param name="b">The second decimal.</param>
            <returns>The lowest common denominator.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.Gcd(System.Decimal,System.Decimal)">
            <summary>
            The largest positive decimal that divides the numbers without a remainder.
            </summary>
            <param name="a">The first decimal.</param>
            <param name="b">The second decimal.</param>
            <returns>The greatest common divisor.</returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the specified
            culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.String"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the
            specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using
            the specified culture-specific formatting information.
            </summary>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number
            using the specified culture-specific formatting information.
            </summary>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified
            culture-specific formatting information.
            </summary>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified
            culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified
            culture-specific formatting information.
            </summary>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified
            culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified
            culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified
            culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified
            culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified
            culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified
            culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified
            culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that
            supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified
            culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that
            implements this interface.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified
            <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific
            formatting information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is
            equivalent to the value of this instance.
            </returns>
            <param name="conversionType">
            The <see cref="T:System.Type"/> to which the value of this instance is converted.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates
            whether the current instance precedes, follows, or occurs in the same position in the sort order as the
            other object.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has these meanings: Value Meaning Less than zero This instance precedes
            <paramref name="obj"/> in the sort order. Zero This instance occurs in the same position in the sort order
            as <paramref name="obj"/>. Greater than zero This instance follows <paramref name="obj"/> in the sort order.
            </returns>
            <param name="obj">An object to compare with this instance. </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not the same type as this instance.
            </exception>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.CompareTo(`0)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates
            whether the current instance precedes, follows, or occurs in the same position in the sort order as the
            other object.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these
            meanings: Value Meaning Less than zero This instance precedes <paramref name="other"/> in the sort order.
            Zero This instance occurs in the same position in the sort order as <paramref name="other"/>. Greater than
            zero This instance follows <paramref name="other"/> in the sort order.
            </returns>
            <param name="other">An object to compare with this instance. </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value;
            otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current instance. </param>
        </member>
        <member name="M:ImageProcessor.Metadata.Rational`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processing.Adjustments">
            <summary>
            Provides reusable adjustment methods to apply to images.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Adjustments.Gamma(System.Drawing.Image,System.Single)">
            <summary>
            Adjust the gamma (intensity of the light) component of the given image.
            </summary>
            <param name="source">The <see cref="T:System.Drawing.Image"/> source to adjust.</param>
            <param name="value">The value to adjust the gamma by (typically between .2 and 5).</param>
            <returns>
            The <see cref="T:System.Drawing.Bitmap"/> with the gamma adjusted.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the value falls outside the acceptable range.
            </exception>
        </member>
        <member name="T:ImageProcessor.Processing.Alpha">
            <summary>
            Changes the alpha component of the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Alpha.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Alpha"/> class.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images opacity. Range 0..100.
            </param>
        </member>
        <member name="M:ImageProcessor.Processing.Alpha.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.Alpha.GuardRange(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.AutoRotate">
            <summary>
            Performs auto-rotation to ensure that EXIF defined rotation is reflected in
            the final image. <see href="http://sylvana.net/jpegcrop/exif_orientation.html"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.AutoRotate.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.BackgroundColor">
            <summary>
            Changes the background color of an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.BackgroundColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.BackgroundColor"/> class.
            </summary>
            <param name="color">The color to set.</param>
        </member>
        <member name="P:ImageProcessor.Processing.BackgroundColor.Options">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.BackgroundColor.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.Brightness">
            <summary>
            Changes the brightness component of the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Brightness.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Brightness"/> class.
            </summary>
            <param name="amount">
            The percentage by which to alter the images brightness. Range -100..100.
            </param>
        </member>
        <member name="M:ImageProcessor.Processing.Brightness.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.Brightness.GuardRange(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.ColorMatrixProcessor">
            <summary>
            A base class for processing images via color matrices.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.ColorMatrixProcessor.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.ColorMatrixProcessor.ApplyMatrix(System.Drawing.Image,System.Drawing.Imaging.ColorMatrix)">
            <summary>
            Performs the application of the color matrix upon the image.
            </summary>
            <param name="frame">The image frame.</param>
            <param name="colorMatrix">The color matrix.</param>
        </member>
        <member name="T:ImageProcessor.Processing.ColorMatrixRangedProcessor">
            <summary>
            A base class for processing images via color matrices.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.ColorMatrixRangedProcessor.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.ColorMatrixRangedProcessor"/> class.
            </summary>
            <param name="amount">The amount by which to adjust the matrix.</param>
        </member>
        <member name="P:ImageProcessor.Processing.ColorMatrixRangedProcessor.Options">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.ColorMatrixRangedProcessor.GuardRange(System.Single)">
            <summary>
            A method for protecting input thresholds.
            </summary>
            <param name="amount">The amount to check.</param>
            <exception cref="T:ImageProcessor.ImageProcessingException">
            Thrown if the range is outith the acceptable threshold.
            </exception>
        </member>
        <member name="T:ImageProcessor.Processing.Contrast">
            <summary>
            Changes the contrast component of the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Contrast.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Contrast"/> class.
            </summary>
            <param name="amount">
            The percentage by which to alter the images contrast. Range -100..100.
            </param>
        </member>
        <member name="M:ImageProcessor.Processing.Contrast.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.Contrast.GuardRange(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.Convolution2DProcessor">
            <summary>
            Applies convolution to an image using two 2 dimensional kernel arrays.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Convolution2DProcessor.#ctor(ImageProcessor.Processing.KernelPair)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Convolution2DProcessor"/> class.
            </summary>
            <param name="kernels">The horizontal and vertical kernel operators.</param>
        </member>
        <member name="P:ImageProcessor.Processing.Convolution2DProcessor.Options">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.Convolution2DProcessor.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.KernelPair">
            <summary>
            A pair of convolution kernels.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.KernelPair.#ctor(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.KernelPair"/> class.
            </summary>
            <param name="kernelX">The horizontal kernel operator.</param>
            <param name="kernelY">The vertical kernel operator.</param>
        </member>
        <member name="P:ImageProcessor.Processing.KernelPair.KernelX">
            <summary>
            Gets the horizontal kernel operator.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.KernelPair.KernelY">
            <summary>
            Gets the vertical kernel operator.
            </summary>
        </member>
        <member name="T:ImageProcessor.Processing.ConvolutionProcessor">
            <summary>
            Applies a convolution kernel to an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.ConvolutionProcessor.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.ConvolutionProcessor"/> class.
            </summary>
            <param name="kernel">The convolution kernel.</param>
        </member>
        <member name="P:ImageProcessor.Processing.ConvolutionProcessor.Options">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.ConvolutionProcessor.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.EdgeDetection2DProcessor">
            <summary>
            A base class for processing images using edge detection.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.EdgeDetection2DProcessor.#ctor(ImageProcessor.Processing.KernelPair,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.EdgeDetection2DProcessor"/> class.
            </summary>
            <param name="kernels">The horizontal and vertical kernel operators.</param>
            <param name="grayscale">Whether to convert the image to grascale before processing.</param>
        </member>
        <member name="P:ImageProcessor.Processing.EdgeDetection2DProcessor.Kernels">
            <summary>
            Gets the kernel operator pair.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.EdgeDetection2DProcessor.Grayscale">
            <summary>
            Gets a value indicating whether to convert the image to grascale before processing.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.EdgeDetection2DProcessor.ImageProcessor#Processing#IGraphicsProcessor{ImageProcessor#Processing#KernelPair}#Options">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Processing.EdgeDetection2DProcessor.ImageProcessor#Processing#IGraphicsProcessor{System#Boolean}#Options">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.EdgeDetection2DProcessor.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.EdgeDetectionOperators">
            <summary>
            Enumerates the various types of defined edge detection filters.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.EdgeDetectionOperators.Kayyali">
            <summary>
            The Kayyali operator filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.EdgeDetectionOperators.Laplacian3x3">
            <summary>
            The Laplacian3X3 operator filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.EdgeDetectionOperators.Laplacian5x5">
            <summary>
            The Laplacian5X5 operator filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.EdgeDetectionOperators.LaplacianOfGaussian">
            <summary>
            The LaplacianOfGaussian operator filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.EdgeDetectionOperators.Prewitt">
            <summary>
            The Prewitt operator filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.EdgeDetectionOperators.RobertsCross">
            <summary>
            The RobertsCross operator filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.EdgeDetectionOperators.Scharr">
            <summary>
            The Scharr operator filter.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.EdgeDetectionOperators.Sobel">
            <summary>
            The Sobel operator filter.
            </summary>
        </member>
        <member name="T:ImageProcessor.Processing.EdgeDetectionProcessor">
            <summary>
            A base class for processing images using edge detection.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.EdgeDetectionProcessor.#ctor(System.Double[0:,0:],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.EdgeDetectionProcessor"/> class.
            </summary>
            <param name="kernel">The kernel operator.</param>
            <param name="grayscale">Whether to convert the image to grascale before processing.</param>
        </member>
        <member name="P:ImageProcessor.Processing.EdgeDetectionProcessor.Kernel">
            <summary>
            Gets the kernel operator.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.EdgeDetectionProcessor.Grayscale">
            <summary>
            Gets a value indicating whether to convert the image to grascale before processing.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.EdgeDetectionProcessor.ImageProcessor#Processing#IGraphicsProcessor{System#Double[,]}#Options">
            <inheritdoc/>
        </member>
        <member name="P:ImageProcessor.Processing.EdgeDetectionProcessor.ImageProcessor#Processing#IGraphicsProcessor{System#Boolean}#Options">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.EdgeDetectionProcessor.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.Kayyali">
            <summary>
            Detects edges within an image using Kayyali operators.
            <see href="https://edgedetection.webs.com/"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Kayyali.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Kayyali"/> class.
            </summary>
            <param name="grayscale">Whether to convert the image to grascale before processing.</param>
        </member>
        <member name="T:ImageProcessor.Processing.Laplacian3x3">
            <summary>
            Detects edges within an image using Laplacian 3x3 operators.
            <see href="http://en.wikipedia.org/wiki/Discrete_Laplace_operator"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Laplacian3x3.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Laplacian3x3"/> class.
            </summary>
            <param name="grayscale">Whether to convert the image to grascale before processing.</param>
        </member>
        <member name="T:ImageProcessor.Processing.Laplacian5x5">
            <summary>
            Detects edges within an image using Laplacian 5x5 operators.
            <see href="http://en.wikipedia.org/wiki/Discrete_Laplace_operator"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Laplacian5x5.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Laplacian5x5"/> class.
            </summary>
            <param name="grayscale">Whether to convert the image to grascale before processing.</param>
        </member>
        <member name="T:ImageProcessor.Processing.LaplacianOfGaussian">
            <summary>
            Detects edges within an image using Laplacian of Gaussian operators.
            <see href="http://fourier.eng.hmc.edu/e161/lectures/gradient/node9.html"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.LaplacianOfGaussian.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.LaplacianOfGaussian"/> class.
            </summary>
            <param name="grayscale">Whether to convert the image to grascale before processing.</param>
        </member>
        <member name="T:ImageProcessor.Processing.Prewitt">
            <summary>
            Detects edges within an image using Prewitt operators.
            <see href="http://en.wikipedia.org/wiki/Prewitt_operator"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Prewitt.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Prewitt"/> class.
            </summary>
            <param name="grayscale">Whether to convert the image to grascale before processing.</param>
        </member>
        <member name="T:ImageProcessor.Processing.RobertsCross">
            <summary>
            Detects edges within an image using RobertsCross operators.
            <see href="http://en.wikipedia.org/wiki/Roberts_cross"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.RobertsCross.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.RobertsCross"/> class.
            </summary>
            <param name="grayscale">Whether to convert the image to grascale before processing.</param>
        </member>
        <member name="T:ImageProcessor.Processing.Scharr">
            <summary>
            Detects edges within an image using Scharr operators.
            <see href="http://en.wikipedia.org/wiki/Sobel_operator#Alternative_operators"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Scharr.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Scharr"/> class.
            </summary>
            <param name="grayscale">Whether to convert the image to grascale before processing.</param>
        </member>
        <member name="T:ImageProcessor.Processing.Sobel">
            <summary>
            Detects edges within an image using Sobel operators.
            <see href="http://en.wikipedia.org/wiki/Sobel_operator" />.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Sobel.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Sobel"/> class.
            </summary>
            <param name="grayscale">Whether to convert the image to grascale before processing.</param>
        </member>
        <member name="T:ImageProcessor.Processing.CropMode">
            <summary>
            Enumerated crop modes to apply to cropped images.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.CropMode.Pixels">
            <summary>
            Crops the image using the standard rectangle model of x, y, width, height.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.CropMode.Percentage">
            <summary>
            Crops the image using percents model left, top, right, bottom.
            </summary>
        </member>
        <member name="T:ImageProcessor.Processing.Crop">
            <summary>
            Crops an image to the given dimensions.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Crop.#ctor(ImageProcessor.Processing.CropOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Crop"/> class.
            </summary>
            <param name="settings">The settings to crop by.</param>
        </member>
        <member name="P:ImageProcessor.Processing.Crop.Options">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.Crop.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.CropOptions">
            <summary>
            Contains settings for the crop processor.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.CropOptions.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.CropOptions"/> class.
            </summary>
            <param name="left">The left coordinate to crop.</param>
            <param name="top">The top coordinate to crop.</param>
            <param name="right">The right coordinate to crop.</param>
            <param name="bottom">The bottom coordinate to crop.</param>
        </member>
        <member name="M:ImageProcessor.Processing.CropOptions.#ctor(System.Single,System.Single,System.Single,System.Single,ImageProcessor.Processing.CropMode)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.CropOptions"/> class.
            </summary>
            <param name="left">The left coordinate to crop.</param>
            <param name="top">The top coordinate to crop.</param>
            <param name="right">The right coordinate to crop.</param>
            <param name="bottom">The bottom coordinate to crop.</param>
            <param name="cropMode">The <see cref="P:ImageProcessor.Processing.CropOptions.CropMode"/>.</param>
            <remarks>
            If the <see cref="P:ImageProcessor.Processing.CropOptions.CropMode"/> is set to <see cref="F:ImageProcessor.Processing.CropMode.Percentage"/> then the
            four coordinates represent the percentile to reduce from each edge.
            </remarks>
        </member>
        <member name="P:ImageProcessor.Processing.CropOptions.Left">
            <summary>
            Gets the left coordinate to crop.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.CropOptions.Top">
            <summary>
            Gets the top coordinate to crop.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.CropOptions.Right">
            <summary>
            Gets the right coordinate to crop.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.CropOptions.Bottom">
            <summary>
            Gets the bottom coordinate to crop.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.CropOptions.CropMode">
            <summary>
            Gets the <see cref="P:ImageProcessor.Processing.CropOptions.CropMode"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.CropOptions.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.Grayscale">
            <summary>
            Changes the grayscale component of the image using the formula as specified by ITU-R Recommendation BT.601.
            <see href="https://en.wikipedia.org/wiki/Luma_%28video%29#Rec._601_luma_versus_Rec._709_luma_coefficients"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Grayscale.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Grayscale"/> class.
            </summary>
            <param name="percentage">
            The percentage by which to alter the images opacity. Range 0..100.
            </param>
        </member>
        <member name="M:ImageProcessor.Processing.Grayscale.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.Grayscale.GuardRange(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.Hue">
            <summary>
            Changes the hue component of the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Hue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Hue"/> class.
            </summary>
            <param name="degrees">The rotation angle in degrees to adjust the hue.</param>
        </member>
        <member name="M:ImageProcessor.Processing.Hue.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.IGraphicsProcessor">
            <summary>
            Defines the contract for graphics processors.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.IGraphicsProcessor.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <summary>
            Returns a new image frame from the source with the process applied.
            </summary>
            <param name="factory">The <see cref="T:ImageProcessor.ImageFactory"/> class.</param>
            <param name="frame">The source image frame.</param>
            <returns>The <see cref="T:System.Drawing.Image"/>.</returns>
        </member>
        <member name="T:ImageProcessor.Processing.IGraphicsProcessor`1">
            <summary>
            Defines the contract for graphics processors with options.
            </summary>
            <typeparam name="T">The type of options.</typeparam>
        </member>
        <member name="P:ImageProcessor.Processing.IGraphicsProcessor`1.Options">
            <summary>
            Gets the options.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.KnownColorMatrices.CreateBrightnessFilter(System.Single)">
            <summary>
            Create a brightness filter matrix using the given amount.
            </summary>
            <remarks>
            A value of 0 will create an image that is completely black. A value of 1 leaves the input unchanged.
            Other values are linear multipliers on the effect. Values of an amount over 1 are allowed, providing brighter results.
            </remarks>
            <param name="amount">The proportion of the conversion. Must be greater than or equal to 0.</param>
            <returns>The <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Processing.KnownColorMatrices.CreateContrastFilter(System.Single)">
            <summary>
            Create a contrast filter matrix using the given amount.
            </summary>
            <remarks>
            A value of 0 will create an image that is completely gray. A value of 1 leaves the input unchanged.
            Other values are linear multipliers on the effect. Values of an amount over 1 are allowed, providing results with more contrast.
            </remarks>
            <param name="amount">The proportion of the conversion. Must be greater than or equal to 0.</param>
            <returns>The <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Processing.KnownColorMatrices.CreateGrayscaleFilter(System.Single)">
            <summary>
            Create a grayscale filter matrix using the given amount using the formula as specified by ITU-R Recommendation BT.601.
            <see href="https://en.wikipedia.org/wiki/Luma_%28video%29#Rec._601_luma_versus_Rec._709_luma_coefficients"/>.
            </summary>
            <param name="amount">The proportion of the conversion. Must be between 0 and 1.</param>
            <returns>The <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Processing.KnownColorMatrices.CreateHueFilter(System.Single)">
            <summary>
            Create a hue filter matrix using the given angle in degrees.
            </summary>
            <param name="degrees">The angle of rotation in degrees.</param>
            <returns>The <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Processing.KnownColorMatrices.CreateOpacityFilter(System.Single)">
            <summary>
            Create an opacity filter matrix using the given amount.
            </summary>
            <param name="amount">The proportion of the conversion. Must be between 0 and 1.</param>
            <returns>The <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Processing.KnownColorMatrices.CreateSaturationFilter(System.Single)">
            <summary>
            Create a saturation filter matrix using the given amount.
            </summary>
            <remarks>
            A value of 0 is completely un-saturated. A value of 1 leaves the input unchanged.
            Other values are linear multipliers on the effect. Values of amount over 1 are allowed, providing super-saturated results.
            </remarks>
            <param name="amount">The proportion of the conversion. Must be greater than or equal to 0.</param>
            <returns>The <see cref="T:System.Drawing.Imaging.ColorMatrix"/>.</returns>
        </member>
        <member name="T:ImageProcessor.Processing.Pixelate">
            <summary>
            Pixelates an image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Pixelate.#ctor(ImageProcessor.Processing.PixelateOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Pixelate"/> class.
            </summary>
            <param name="options">The pixelate options.</param>
        </member>
        <member name="P:ImageProcessor.Processing.Pixelate.Options">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.Pixelate.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.PixelateOptions">
            <summary>
            The pixelate options for pixelating images.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.PixelateOptions.#ctor(System.Int32,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.PixelateOptions"/> class.
            </summary>
            <param name="size">The pixel size.</param>
            <param name="rectangle">The bounds within which to pixelate.</param>
        </member>
        <member name="P:ImageProcessor.Processing.PixelateOptions.Size">
            <summary>
            Gets the size of the pixels.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.PixelateOptions.Rectangle">
            <summary>
            Gets the rectangle bounds within which to pixelate.
            </summary>
        </member>
        <member name="T:ImageProcessor.Processing.ResizeMode">
            <summary>
            Provides enumeration over how the image should be resized.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.ResizeMode.Crop">
            <summary>
            Crops the resized image to fit the bounds of its container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.ResizeMode.Pad">
            <summary>
            Pads the resized image to fit the bounds of its container.
            If only one dimension is passed, will maintain the original aspect ratio.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.ResizeMode.BoxPad">
            <summary>
            Pads the image to fit the bound of the container without resizing the
            original source.
            When downscaling, performs the same functionality as <see cref="F:ImageProcessor.Processing.ResizeMode.Pad"/>
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.ResizeMode.Max">
            <summary>
            Constrains the resized image to fit the bounds of its container maintaining
            the original aspect ratio.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.ResizeMode.Min">
            <summary>
            Resizes the image until the shortest side reaches the set given dimension.
            Upscaling is disabled in this mode and the original image will be returned
            if attempted.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.ResizeMode.Stretch">
            <summary>
            Stretches the resized image to fit the bounds of its container.
            </summary>
        </member>
        <member name="T:ImageProcessor.Processing.AnchorPositionMode">
            <summary>
            Enumerated anchor positions to apply to resized images.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.AnchorPositionMode.Center">
            <summary>
            Anchors the position of the image to the center of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.AnchorPositionMode.Top">
            <summary>
            Anchors the position of the image to the top of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.AnchorPositionMode.Bottom">
            <summary>
            Anchors the position of the image to the bottom of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.AnchorPositionMode.Left">
            <summary>
            Anchors the position of the image to the left of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.AnchorPositionMode.Right">
            <summary>
            Anchors the position of the image to the right of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.AnchorPositionMode.TopLeft">
            <summary>
            Anchors the position of the image to the top left side of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.AnchorPositionMode.TopRight">
            <summary>
            Anchors the position of the image to the top right side of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.AnchorPositionMode.BottomRight">
            <summary>
            Anchors the position of the image to the bottom right side of it's bounding container.
            </summary>
        </member>
        <member name="F:ImageProcessor.Processing.AnchorPositionMode.BottomLeft">
            <summary>
            Anchors the position of the image to the bottom left side of it's bounding container.
            </summary>
        </member>
        <member name="T:ImageProcessor.Processing.Resize">
            <summary>
            Resizes an image to the given dimensions.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Resize.#ctor(ImageProcessor.Processing.ResizeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Resize"/> class.
            </summary>
            <param name="options">The resize options.</param>
        </member>
        <member name="P:ImageProcessor.Processing.Resize.Options">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.Resize.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Processing.ResizeOptions">
            <summary>
            The resize options for resizing images against certain modes.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.ResizeOptions.ResizeMode">
            <summary>
            Gets or sets the resize mode.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.ResizeOptions.InterpolationMode">
            <summary>
            Gets or sets the interpolation mode.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.ResizeOptions.Position">
            <summary>
            Gets or sets the anchor position.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.ResizeOptions.CenterCoordinates">
            <summary>
            Gets or sets the center coordinates.
            </summary>
        </member>
        <member name="P:ImageProcessor.Processing.ResizeOptions.Size">
            <summary>
            Gets or sets the target size.
            </summary>
        </member>
        <member name="T:ImageProcessor.Processing.ResizeHelper">
            <summary>
            Provides methods to help calculate the target rectangle when resizing using the
            <see cref="T:ImageProcessor.Processing.ResizeMode"/> enumeration.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.ResizeHelper.CalculateTargetLocationAndBounds(System.Drawing.Size,ImageProcessor.Processing.ResizeOptions,System.Int32,System.Int32)">
            <summary>
            Calculates the target location and bounds to perform the resize operation against.
            </summary>
            <param name="sourceSize">The source image size.</param>
            <param name="options">The resize options.</param>
            <param name="width">The target width.</param>
            <param name="height">The target height.</param>
            <returns>
            The tuple representing the location and the bounds.
            </returns>
        </member>
        <member name="T:ImageProcessor.Processing.Saturation">
            <summary>
            Changes the saturation component of the image.
            </summary>
        </member>
        <member name="M:ImageProcessor.Processing.Saturation.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Processing.Saturation"/> class.
            </summary>
            <param name="amount">
            The percentage by which to alter the images saturation. Range -100..100.
            </param>
        </member>
        <member name="M:ImageProcessor.Processing.Saturation.ProcessImageFrame(ImageProcessor.ImageFactory,System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Processing.Saturation.GuardRange(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Quantizers.IQuantizer">
            <summary>
            Defines the contract for allowing quantization of images.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.IQuantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and returns the resulting output bitmap.
            TODO: This should copy metadata.
            </summary>
            <param name="source">The image to quantize.</param>
            <returns><see cref="T:System.Drawing.Bitmap"/>.</returns>
        </member>
        <member name="T:ImageProcessor.Quantizers.OctreeQuantizer">
            <summary>
            Encapsulates methods to calculate the color palette if an image using an Octree pattern.
            <see href="http://msdn.microsoft.com/en-us/library/aa479306.aspx"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.maxColors">
            <summary>
            Maximum allowed color depth.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.maxColorBits">
            <summary>
            Maximum allowed color bit depth.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.octree">
            <summary>
            Stores the tree.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Quantizers.OctreeQuantizer"/> class.
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the Octree,
            the second pass quantizes a color based on the nodes in the tree.
            <para>
            Defaults to return a maximum of 255 colors plus transparency with 8 significant bits.
            </para>
            </remarks>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Quantizers.OctreeQuantizer"/> class.
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the Octree,
            the second pass quantizes a color based on the nodes in the tree.
            </remarks>
            <param name="maxColors">The maximum number of colors to return.</param>
            <param name="maxColorBits">The number of significant bits.</param>
        </member>
        <member name="P:ImageProcessor.Quantizers.OctreeQuantizer.Threshold">
            <summary>
            Gets or sets the transparency threshold (0 - 255).
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.InitialQuantizePixel(ImageProcessor.Bgra32*)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.QuantizePixel(ImageProcessor.Bgra32*)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <inheritdoc/>
        </member>
        <member name="T:ImageProcessor.Quantizers.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.Octree.Mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.Octree.root">
            <summary>
            The root of the Octree.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.Octree.maxColorBits">
            <summary>
            Maximum number of significant bits in the image.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.Octree.previousNode">
            <summary>
            Store the last node quantized.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.Octree.previousColor">
            <summary>
            Cache the previous color quantized.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Quantizers.OctreeQuantizer.Octree"/> class.
            </summary>
            <param name="maxColorBits">The maximum number of significant bits in the image.</param>
        </member>
        <member name="P:ImageProcessor.Quantizers.OctreeQuantizer.Octree.Leaves">
            <summary>
            Gets or sets the number of leaves in the tree.
            </summary>
        </member>
        <member name="P:ImageProcessor.Quantizers.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Gets the array of reducible nodes.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.Octree.AddColor(ImageProcessor.Bgra32*)">
            <summary>
            Add a given color value to the Octree.
            </summary>
            <param name="pixel">The <see cref="T:ImageProcessor.Bgra32"/>containing color information to add.</param>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the Octree to a palette with a maximum of colorCount colors.
            </summary>
            <param name="colorCount">The maximum number of colors.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.List`1"/> with the palletized colors.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.Octree.GetPaletteIndex(ImageProcessor.Bgra32*)">
            <summary>
            Get the palette index for the passed color.
            </summary>
            <param name="pixel">The <see cref="T:ImageProcessor.Bgra32"/> containing the pixel data.</param>
            <returns>
            The index of the given structure.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.Octree.TrackPrevious(ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized.
            </summary>
            <param name="node">The node last quantized.</param>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree.
            </summary>
        </member>
        <member name="T:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.children">
            <summary>
            Pointers to any child nodes.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.leaf">
            <summary>
            Flag indicating that this is a leaf node.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.pixelCount">
            <summary>
            Number of pixels in this node.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.red">
            <summary>
            Red component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.green">
            <summary>
            Green Component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.blue">
            <summary>
            Blue component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.paletteIndex">
            <summary>
            The index of this node in the palette.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,ImageProcessor.Quantizers.OctreeQuantizer.Octree)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode"/> class.
            </summary>
            <param name="level">The level in the tree = 0 - 7.</param>
            <param name="colorBits">The number of significant color bits in the image.</param>
            <param name="octree">The tree to which this node belongs.</param>
        </member>
        <member name="P:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Gets the next reducible node.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.AddColor(ImageProcessor.Bgra32*,System.Int32,System.Int32,ImageProcessor.Quantizers.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree.
            </summary>
            <param name="pixel">The color.</param>
            <param name="colorBits">The number of significant color bits.</param>
            <param name="level">The level in the tree.</param>
            <param name="octree">The tree to which this node belongs.</param>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children.
            </summary>
            <returns>The number of leaves removed.</returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.Generic.List{System.Drawing.Color},System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette.
            </summary>
            <param name="palette">
            The palette.
            </param>
            <param name="index">
            The current palette index.
            </param>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(ImageProcessor.Bgra32*,System.Int32)">
            <summary>
            Return the palette index for the passed color.
            </summary>
            <param name="pixel">The <see cref="T:ImageProcessor.Bgra32"/> representing the pixel.</param>
            <param name="level">The level.</param>
            <returns>
            The <see cref="T:System.Int32"/> representing the index of the pixel in the palette.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.OctreeQuantizer.Octree.OctreeNode.Increment(ImageProcessor.Bgra32*)">
            <summary>
            Increment the pixel count and add to the color information.
            </summary>
            <param name="pixel">The pixel to add.</param>
        </member>
        <member name="T:ImageProcessor.Quantizers.Quantizer">
            <summary>
            Encapsulates methods to calculate the color palette of an image.
            <see href="http://msdn.microsoft.com/en-us/library/aa479306.aspx"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.Quantizer.singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.Quantizer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Quantizers.Quantizer"/> class.
            </summary>
            <param name="singlePass">
            If true, the quantization only needs to loop through the source pixels once.
            </param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:ImageProcessor.Quantizers.Quantizer.Quantize(System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Quantizers.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image.
            </summary>
            <param name="sourceData">The source data.</param>
            <param name="width">The width in pixels of the image.</param>
            <param name="height">The height in pixels of the image.</param>
        </member>
        <member name="M:ImageProcessor.Quantizers.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap.
            </summary>
            <param name="sourceData">The source bitmap, locked into memory.</param>
            <param name="output">The output bitmap.</param>
            <param name="width">The width in pixels of the image.</param>
            <param name="height">The height in pixels of the image.</param>
            <param name="bounds">The bounding rectangle.</param>
        </member>
        <member name="M:ImageProcessor.Quantizers.Quantizer.InitialQuantizePixel(ImageProcessor.Bgra32*)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm.
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
            </summary>
            <param name="pixel">The pixel to quantize.</param>
        </member>
        <member name="M:ImageProcessor.Quantizers.Quantizer.QuantizePixel(ImageProcessor.Bgra32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm.
            </summary>
            <param name="pixel">The pixel to quantize.</param>
            <returns><see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image.
            </summary>
            <param name="original">Any old palette, this is overwritten.</param>
            <returns>
            The new <see cref="T:System.Drawing.Imaging.ColorPalette"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Quantizers.Box">
            <summary>
            The box for storing color attributes.
            Adapted from <see href="https://github.com/drewnoakes/nquant"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.Box.AlphaMaximum">
            <summary>
            The alpha maximum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.Box.AlphaMinimum">
            <summary>
            The alpha minimum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.Box.BlueMaximum">
            <summary>
            The blue maximum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.Box.BlueMinimum">
            <summary>
            The blue minimum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.Box.GreenMaximum">
            <summary>
            The green maximum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.Box.GreenMinimum">
            <summary>
            The green minimum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.Box.RedMaximum">
            <summary>
            The red maximum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.Box.RedMinimum">
            <summary>
            The red minimum.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.Box.Size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="T:ImageProcessor.Quantizers.ColorMoment">
            <summary>
            The cumulative color moment for holding pixel information.
            Adapted from <see href="https://github.com/drewnoakes/nquant" />.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.ColorMoment.Alpha">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.ColorMoment.Blue">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.ColorMoment.Green">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.ColorMoment.Moment">
            <summary>
            The moment.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.ColorMoment.Red">
            <summary>
            The red.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.ColorMoment.Weight">
            <summary>
            The weight.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.ColorMoment.op_Addition(ImageProcessor.Quantizers.ColorMoment,ImageProcessor.Quantizers.ColorMoment)">
            <summary>
            Adds one <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> to another.
            </summary>
            <param name="firstAddend">
            The first <see cref="T:ImageProcessor.Quantizers.ColorMoment"/>.
            </param>
            <param name="secondAddend">
            The second <see cref="T:ImageProcessor.Quantizers.ColorMoment"/>.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> representing the sum of the addition.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.ColorMoment.op_Subtraction(ImageProcessor.Quantizers.ColorMoment,ImageProcessor.Quantizers.ColorMoment)">
            <summary>
            Subtracts one <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> from another.
            </summary>
            <param name="minuend">
            The <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> from which the other <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> will be subtracted.
            </param>
            <param name="subtrahend">
            The <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> that is to be subtracted.
            </param>
            <returns>
            The <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> representing the difference of the subtraction.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.ColorMoment.op_UnaryNegation(ImageProcessor.Quantizers.ColorMoment)">
            <summary>
            Negates the given <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> .
            </summary>
            <param name="moment">
            The <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> to negate.
            </param>
            <returns>
            The negated result.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.ColorMoment.Add(ImageProcessor.Bgra32)">
            <summary>
            Adds a pixel to the current instance.
            </summary>
            <param name="pixel">
            The pixel to add.
            </param>
        </member>
        <member name="M:ImageProcessor.Quantizers.ColorMoment.AddFast(ImageProcessor.Quantizers.ColorMoment@)">
            <summary>
            Adds a color moment to the current instance more quickly.
            </summary>
            <param name="moment">
            The <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> to add.
            </param>
        </member>
        <member name="M:ImageProcessor.Quantizers.ColorMoment.Amplitude">
            <summary>
            The amplitude.
            </summary>
            <returns>
            The <see cref="T:System.Int64"/> representing the amplitude.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.ColorMoment.Variance">
            <summary>
            The variance.
            </summary>
            <returns>
            The <see cref="T:System.Single"/> representing the variance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.ColorMoment.WeightedDistance">
            <summary>
            The weighted distance.
            </summary>
            <returns>
            The <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Quantizers.CubeCut">
            <summary>
            Represents a cube cut.
            Adapted from <see href="https://github.com/drewnoakes/nquant"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.CubeCut.Position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.CubeCut.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.CubeCut.#ctor(System.Nullable{System.Byte},System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Quantizers.CubeCut"/> struct.
            </summary>
            <param name="cutPoint">The cut point.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:ImageProcessor.Quantizers.Histogram">
            <summary>
            The histogram representing the distribution of color data.
            Adapted from <see href="https://github.com/drewnoakes/nquant" />.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.Histogram.SideSize">
            <summary>
            The side size.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.Histogram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Quantizers.Histogram"/> class.
            </summary>
        </member>
        <member name="P:ImageProcessor.Quantizers.Histogram.Moments">
            <summary>
            Gets the collection of moments.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.Histogram.Clear">
            <summary>
            Clears the histogram.
            </summary>
        </member>
        <member name="T:ImageProcessor.Quantizers.ImageBuffer">
            <summary>
            The image buffer for storing and manipulating pixel information.
            Adapted from <see href="https://github.com/drewnoakes/nquant"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.ImageBuffer.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Quantizers.ImageBuffer"/> class.
            </summary>
            <param name="image">The image to store.</param>
        </member>
        <member name="P:ImageProcessor.Quantizers.ImageBuffer.Image">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="P:ImageProcessor.Quantizers.ImageBuffer.PixelLines">
            <summary>
            Gets the enumerable pixel array representing each row of pixels.
            </summary>
            <exception cref="T:ImageProcessor.QuantizationException">
            Thrown if the given image is not a 32 bit per pixel image.
            </exception>
        </member>
        <member name="M:ImageProcessor.Quantizers.ImageBuffer.UpdatePixelIndexes(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Updates the pixel indexes.
            </summary>
            <param name="lineIndexes">
            The enumerable byte array representing each row of pixels.
            </param>
        </member>
        <member name="T:ImageProcessor.Quantizers.IWuQuantizer">
            <summary>
            Encapsulates methods to calculate the color palette of an image using
            a Wu color quantizer <see href="http://www.ece.mcmaster.ca/~xwu/cq.c"/>.
            Adapted from <see href="https://github.com/drewnoakes/nquant" />.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.IWuQuantizer.Quantize(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Quantizes the given image.
            </summary>
            <param name="image">The 32 bit per pixel <see cref="T:System.Drawing.Image"/>.</param>
            <param name="alphaThreshold">
            The alpha threshold. All colors with an alpha value less than this will be
            considered fully transparent.
            </param>
            <param name="alphaFader">
            The alpha fader. Alpha values will be normalized to the nearest multiple of this value.
            </param>
            <returns>
            The quantized <see cref="T:System.Drawing.Image"/>.
            </returns>
        </member>
        <member name="T:ImageProcessor.Quantizers.PaletteColorHistory">
            <summary>
            The palette color history containing the sum of all pixel data.
            Adapted from <see href="https://github.com/drewnoakes/nquant" />.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.PaletteColorHistory.Alpha">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.PaletteColorHistory.Red">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.PaletteColorHistory.Green">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.PaletteColorHistory.Blue">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.PaletteColorHistory.Sum">
            <summary>
            The sum of the color components.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.PaletteColorHistory.ToNormalizedColor">
            <summary>
            Normalizes the color.
            </summary>
            <returns>
            The normalized <see cref="T:System.Drawing.Color"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.PaletteColorHistory.AddPixel(ImageProcessor.Bgra32)">
            <summary>
            Adds a pixel to the color history.
            </summary>
            <param name="pixel">
            The pixel to add.
            </param>
        </member>
        <member name="T:ImageProcessor.Quantizers.PaletteLookup">
            <summary>
            Stores the indexed color palette of an image for fast access.
            Adapted from <see href="https://github.com/drewnoakes/nquant" />.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.PaletteLookup.lookupNodes">
            <summary>
            The dictionary for caching lookup nodes.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.PaletteLookup.paletteMask">
            <summary>
            The palette mask.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.PaletteLookup.#ctor(ImageProcessor.Bgra32[])">
            <summary>
            Initializes a new instance of the <see cref="T:ImageProcessor.Quantizers.PaletteLookup"/> class.
            </summary>
            <param name="palette">
            The palette.
            </param>
        </member>
        <member name="P:ImageProcessor.Quantizers.PaletteLookup.Palette">
            <summary>
            Gets the palette.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.PaletteLookup.GetPaletteIndex(ImageProcessor.Bgra32)">
            <summary>
            Gets palette index for the given pixel.
            </summary>
            <param name="pixel">
            The pixel to return the index for.
            </param>
            <returns>
            The <see cref="T:System.Byte"/> representing the index.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.PaletteLookup.ComputeBitMask(System.Byte,System.Int32)">
            <summary>
            Computes the bit mask.
            </summary>
            <param name="max">
            The maximum byte value.
            </param>
            <param name="bits">
            The number of bits.
            </param>
            <returns>
            The <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.PaletteLookup.GetMask(ImageProcessor.Bgra32[])">
            <summary>
            Gets the mask value from the palette.
            </summary>
            <param name="palette">
            The palette.
            </param>
            <returns>
            The <see cref="T:System.Int32"/> representing the component value of the mask.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.PaletteLookup.HighestSetBitIndex(System.Byte)">
            <summary>
            Gets the highest set bit index.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.PaletteLookup.BuildLookup(ImageProcessor.Bgra32[])">
            <summary>
            The build lookup.
            </summary>
            <param name="palette">
            The palette.
            </param>
        </member>
        <member name="T:ImageProcessor.Quantizers.PaletteLookup.LookupNode">
            <summary>
            Represents a single node containing the index and pixel.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.PaletteLookup.LookupNode.PaletteIndex">
            <summary>
            The palette index.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.PaletteLookup.LookupNode.Color32">
            <summary>
            The pixel.
            </summary>
        </member>
        <member name="T:ImageProcessor.Quantizers.WuQuantizer">
            <summary>
            Encapsulates methods to calculate the color palette of an image using
            a Wu color quantizer <see href="http://www.ece.mcmaster.ca/~xwu/cq.c"/>.
            Adapted from <see href="https://github.com/drewnoakes/nquant"/>.
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizer.GetQuantizedImage(ImageProcessor.Quantizers.ImageBuffer,System.Int32,ImageProcessor.Bgra32[],System.Int32)">
            <summary>
            Quantizes the image contained within the <see cref="T:ImageProcessor.Quantizers.ImageBuffer"/> returning the result.
            </summary>
            <param name="imageBuffer">
            The <see cref="T:ImageProcessor.Quantizers.ImageBuffer"/> for storing and manipulating pixel information..
            </param>
            <param name="colorCount">The maximum number of colors apply to the image.</param>
            <param name="lookups">
            The array of <see cref="T:ImageProcessor.Bgra32"/> containing indexed versions of the images colors.
            </param>
            <param name="alphaThreshold">
            All colors with an alpha value less than this will be considered fully transparent.
            </param>
            <returns>
            The quantized <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizer.BuildPalette(System.Drawing.Imaging.ColorPalette,ImageProcessor.Quantizers.PaletteColorHistory[])">
            <summary>
            Builds a color palette from the given <see cref="T:ImageProcessor.Quantizers.PaletteColorHistory"/>.
            </summary>
            <param name="palette">The <see cref="T:System.Drawing.Imaging.ColorPalette"/> to fill.</param>
            <param name="paletteHistory">
            The <see cref="T:ImageProcessor.Quantizers.PaletteColorHistory"/> containing the sum of all pixel data.
            </param>
            <returns>
            The <see cref="T:System.Drawing.Imaging.ColorPalette"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizer.IndexedPixels(ImageProcessor.Quantizers.ImageBuffer,ImageProcessor.Bgra32[],System.Int32,ImageProcessor.Quantizers.PaletteColorHistory[])">
            <summary>
            Gets an enumerable array of bytes representing each row of the image.
            </summary>
            <param name="image">
            The <see cref="T:ImageProcessor.Quantizers.ImageBuffer"/> for storing and manipulating pixel information.
            </param>
            <param name="lookups">
            The array of <see cref="T:ImageProcessor.Bgra32"/> containing indexed versions of the images colors.
            </param>
            <param name="alphaThreshold">The alpha threshold.</param>
            <param name="paletteHistogram">The palette histogram.</param>
            <returns>
            The enumerable list of <see cref="T:System.Byte"/> representing each pixel.
            </returns>
        </member>
        <member name="T:ImageProcessor.Quantizers.WuQuantizerBase">
            <summary>
            Encapsulates methods to calculate the color palette of an image using
            a Wu color quantizer <see href="http://www.ece.mcmaster.ca/~xwu/cq.c"/>.
            Adapted from <see href="https://github.com/drewnoakes/nquant"/>.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.WuQuantizerBase.AlphaMax">
            <summary>
            The maximum value for an alpha color component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.WuQuantizerBase.AlphaMin">
            <summary>
            The minimum value for an alpha color component.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.WuQuantizerBase.Alpha">
            <summary>
            The position of the alpha component within a byte array.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.WuQuantizerBase.Red">
            <summary>
            The position of the red component within a byte array.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.WuQuantizerBase.Green">
            <summary>
            The position of the green component within a byte array.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.WuQuantizerBase.Blue">
            <summary>
            The position of the blue component within a byte array.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.WuQuantizerBase.SideSize">
            <summary>
            The size of a color cube side.
            </summary>
        </member>
        <member name="F:ImageProcessor.Quantizers.WuQuantizerBase.MaxSideIndex">
            <summary>
            The maximum index within a color cube side.
            </summary>
        </member>
        <member name="P:ImageProcessor.Quantizers.WuQuantizerBase.Threshold">
            <summary>
            Gets or sets the transparency threshold (0 - 255).
            </summary>
        </member>
        <member name="P:ImageProcessor.Quantizers.WuQuantizerBase.Fade">
            <summary>
            Gets or sets the alpha fade (0 - 255).
            </summary>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.Quantize(System.Drawing.Image)">
            <inheritdoc/>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.Quantize(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Quantize an image and return the resulting output bitmap.
            </summary>
            <param name="image">
            The 32 bit per pixel image to quantize.
            </param>
            <param name="alphaThreshold">
            All colors with an alpha value less than this will be considered fully transparent.
            </param>
            <param name="alphaFader">
            Alpha values will be normalized to the nearest multiple of this value.
            </param>
            <returns>
            A quantized version of the image.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.Quantize(System.Drawing.Image,System.Int32,System.Int32,ImageProcessor.Quantizers.Histogram,System.Int32)">
            <summary>
            Quantize an image and return the resulting output bitmap.
            </summary>
            <param name="source">The 32 bit per pixel image to quantize.</param>
            <param name="alphaThreshold">
            All colors with an alpha value less than this will be considered fully transparent.
            </param>
            <param name="alphaFader">
            Alpha values will be normalized to the nearest multiple of this value.
            </param>
            <param name="histogram">
            The <see cref="T:ImageProcessor.Quantizers.Histogram"/> representing the distribution of color data.
            </param>
            <param name="maxColors">The maximum number of colors apply to the image.</param>
            <returns>
            A quantized version of the image.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.GetQuantizedImage(ImageProcessor.Quantizers.ImageBuffer,System.Int32,ImageProcessor.Bgra32[],System.Int32)">
            <summary>
            Quantizes the image contained within the <see cref="T:ImageProcessor.Quantizers.ImageBuffer"/> returning the result.
            </summary>
            <param name="imageBuffer">
            The <see cref="T:ImageProcessor.Quantizers.ImageBuffer"/> for storing and manipulating pixel information..
            </param>
            <param name="colorCount">
            The maximum number of colors apply to the image.
            </param>
            <param name="lookups">
            The array of <see cref="T:ImageProcessor.Bgra32"/> containing indexed versions of the images colors.
            </param>
            <param name="alphaThreshold">
            All colors with an alpha value less than this will be considered fully transparent.
            </param>
            <returns>
            The quantized <see cref="T:System.Drawing.Bitmap"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.BuildHistogram(ImageProcessor.Quantizers.Histogram,ImageProcessor.Quantizers.ImageBuffer,System.Int32,System.Int32)">
            <summary>
            Builds a histogram from the current image.
            </summary>
            <param name="histogram">
            The <see cref="T:ImageProcessor.Quantizers.Histogram"/> representing the distribution of color data.
            </param>
            <param name="imageBuffer">
            The <see cref="T:ImageProcessor.Quantizers.ImageBuffer"/> for storing pixel information.
            </param>
            <param name="alphaThreshold">
            All colors with an alpha value less than this will be considered fully transparent.
            </param>
            <param name="alphaFader">
            Alpha values will be normalized to the nearest multiple of this value.
            </param>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.CalculateMoments(ImageProcessor.Quantizers.ColorMoment[0:,0:,0:,0:])">
            <summary>
            Calculates the color moments from the histogram of moments.
            </summary>
            <param name="moments">
            The three dimensional array of <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> to process.
            </param>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.Top(ImageProcessor.Quantizers.Box,System.Int32,System.Int32,ImageProcessor.Quantizers.ColorMoment[0:,0:,0:,0:])">
            <summary>
            Calculates the volume of the top of the cube.
            </summary>
            <param name="cube">The cube to calculate the volume from.</param>
            <param name="direction">The direction to calculate.</param>
            <param name="position">The position at which to begin.</param>
            <param name="moment">The three dimensional moment.</param>
            <returns>
            The <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> representing the top of the cube.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.Bottom(ImageProcessor.Quantizers.Box,System.Int32,ImageProcessor.Quantizers.ColorMoment[0:,0:,0:,0:])">
            <summary>
            Calculates the volume of the bottom of the cube.
            </summary>
            <param name="cube">The cube to calculate the volume from.</param>
            <param name="direction">The direction to calculate.</param>
            <param name="moment">The three dimensional moment.</param>
            <returns>
            The <see cref="T:ImageProcessor.Quantizers.ColorMoment"/> representing the bottom of the cube.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.Maximize(ImageProcessor.Quantizers.ColorMoment[0:,0:,0:,0:],ImageProcessor.Quantizers.Box,System.Int32,System.Byte,System.Byte,ImageProcessor.Quantizers.ColorMoment)">
            <summary>
            Maximizes the sum of the two boxes.
            </summary>
            <param name="moments">The <see cref="T:ImageProcessor.Quantizers.ColorMoment"/>.</param>
            <param name="cube">The <see cref="T:ImageProcessor.Quantizers.Box"/> cube.</param>
            <param name="direction">The direction.</param>
            <param name="first">The first byte.</param>
            <param name="last">The last byte.</param>
            <param name="whole">The whole <see cref="T:ImageProcessor.Quantizers.ColorMoment"/>.</param>
            <returns>
            The <see cref="T:ImageProcessor.Quantizers.CubeCut"/> representing the sum.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.Cut(ImageProcessor.Quantizers.ColorMoment[0:,0:,0:,0:],ImageProcessor.Quantizers.Box@,ImageProcessor.Quantizers.Box@)">
            <summary>
            Returns a value indicating whether a cube can be cut.
            </summary>
            <param name="moments">The three dimensional array of <see cref="T:ImageProcessor.Quantizers.ColorMoment"/>.</param>
            <param name="first">The first <see cref="T:ImageProcessor.Quantizers.Box"/>.</param>
            <param name="second">The second <see cref="T:ImageProcessor.Quantizers.Box"/>.</param>
            <returns>
            The <see cref="T:System.Boolean"/> indicating the result.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.CalculateVariance(ImageProcessor.Quantizers.ColorMoment[0:,0:,0:,0:],ImageProcessor.Quantizers.Box)">
            <summary>
            Calculates the variance of the volume of the cube.
            </summary>
            <param name="moments">The three dimensional array of <see cref="T:ImageProcessor.Quantizers.ColorMoment"/>.</param>
            <param name="cube">The <see cref="T:ImageProcessor.Quantizers.Box"/> cube.</param>
            <returns>
            The <see cref="T:System.Single"/> representing the variance.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.Volume(ImageProcessor.Quantizers.ColorMoment[0:,0:,0:,0:],ImageProcessor.Quantizers.Box)">
            <summary>
            Calculates the volume of the colors.
            </summary>
            <param name="moments">The three dimensional array of <see cref="T:ImageProcessor.Quantizers.ColorMoment"/>.</param>
            <param name="cube">The <see cref="T:ImageProcessor.Quantizers.Box"/> cube.</param>
            <returns>
            The <see cref="T:System.Single"/> representing the volume.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.SplitData(System.Int32@,ImageProcessor.Quantizers.ColorMoment[0:,0:,0:,0:])">
            <summary>
            Splits the data.
            </summary>
            <param name="colorCount">The color count.</param>
            <param name="moments">The three dimensional array of <see cref="T:ImageProcessor.Quantizers.ColorMoment"/>.</param>
            <returns>
            The array <see cref="T:ImageProcessor.Quantizers.Box"/>.
            </returns>
        </member>
        <member name="M:ImageProcessor.Quantizers.WuQuantizerBase.BuildLookups(ImageProcessor.Quantizers.Box[],ImageProcessor.Quantizers.ColorMoment[0:,0:,0:,0:])">
            <summary>
            Builds an array of pixel data to look within.
            </summary>
            <param name="cubes">The array of <see cref="T:ImageProcessor.Quantizers.Box"/> cubes.</param>
            <param name="moments">The three dimensional array of <see cref="T:ImageProcessor.Quantizers.ColorMoment"/>.</param>
            <returns>
            The array of <see cref="T:ImageProcessor.Bgra32"/>.
            </returns>
        </member>
    </members>
</doc>
